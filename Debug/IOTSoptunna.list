
IOTSoptunna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c8  080047c8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080047d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001138  200000a4  08004874  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011dc  08004874  000211dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5ad  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e0  00000000  00000000  0002e681  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  00030768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  000311c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026afb  00000000  00000000  00031af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a300  00000000  00000000  000585eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9fd8  00000000  00000000  000628eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c8c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b24  00000000  00000000  0014c940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004574 	.word	0x08004574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08004574 	.word	0x08004574

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <init_uart_interrupt>:
static bool error_flag = false;
static bool fail_flag = false;
static int retryConection = 0;


void init_uart_interrupt(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	4903      	ldr	r1, [pc, #12]	; (8000594 <init_uart_interrupt+0x14>)
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <init_uart_interrupt+0x18>)
 800058a:	f002 fcb3 	bl	8002ef4 <HAL_UART_Receive_IT>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000c0 	.word	0x200000c0
 8000598:	200010d4 	.word	0x200010d4

0800059c <HAL_UART_RxCpltCallback>:

/* Probably not the most efficient solution */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

   if (huart->Instance == UART4) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <HAL_UART_RxCpltCallback+0x3c>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d10a      	bne.n	80005c4 <HAL_UART_RxCpltCallback+0x28>
      rx_buffer[rx_buffer_index++] = rx_variable;    // Add 1 byte to rx_Buffer
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <HAL_UART_RxCpltCallback+0x40>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	b2d1      	uxtb	r1, r2
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <HAL_UART_RxCpltCallback+0x40>)
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_UART_RxCpltCallback+0x44>)
 80005be:	7819      	ldrb	r1, [r3, #0]
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_UART_RxCpltCallback+0x48>)
 80005c2:	5499      	strb	r1, [r3, r2]
    }
      HAL_UART_Receive_IT(&huart4, &rx_variable, 1); // Clear flags and read next byte
 80005c4:	2201      	movs	r2, #1
 80005c6:	4906      	ldr	r1, [pc, #24]	; (80005e0 <HAL_UART_RxCpltCallback+0x44>)
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <HAL_UART_RxCpltCallback+0x4c>)
 80005ca:	f002 fc93 	bl	8002ef4 <HAL_UART_Receive_IT>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40004c00 	.word	0x40004c00
 80005dc:	200010c4 	.word	0x200010c4
 80005e0:	200000c0 	.word	0x200000c0
 80005e4:	200000c4 	.word	0x200000c4
 80005e8:	200010d4 	.word	0x200010d4

080005ec <hash>:

/* djb2 hashing algorithm which is used in mapping sent commands to the right ESP8266 response code */
const unsigned long hash(const char *str) {
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    unsigned long hash = 5381;
 80005f4:	f241 5305 	movw	r3, #5381	; 0x1505
 80005f8:	60fb      	str	r3, [r7, #12]
    int c;

    while ((c = *str++))
 80005fa:	e006      	b.n	800060a <hash+0x1e>
        hash = ((hash << 5) + hash) + c;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	015a      	lsls	r2, r3, #5
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	441a      	add	r2, r3
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4413      	add	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
    while ((c = *str++))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f0      	bne.n	80005fc <hash+0x10>
    return hash;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <esp8266_send_command>:

const char* esp8266_send_command(const char* command)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	rx_buffer_index = 0;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <esp8266_send_command+0x88>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	error_flag = false;
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <esp8266_send_command+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	fail_flag = false;
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <esp8266_send_command+0x90>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]

	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8000642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000646:	2100      	movs	r1, #0
 8000648:	481c      	ldr	r0, [pc, #112]	; (80006bc <esp8266_send_command+0x94>)
 800064a:	f003 fb6b 	bl	8003d24 <memset>
	HAL_UART_Transmit(&huart4, (uint8_t*) command, strlen(command), 100);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff fdbe 	bl	80001d0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <esp8266_send_command+0x98>)
 800065e:	f002 fbb5 	bl	8002dcc <HAL_UART_Transmit>

	// wait for OK or ERROR/FAIL
	while((strstr(rx_buffer, ESP8266_AT_OK_TERMINATOR) == NULL)){
 8000662:	e015      	b.n	8000690 <esp8266_send_command+0x68>
		if(strstr(rx_buffer, ESP8266_AT_ERROR) != NULL){
 8000664:	4917      	ldr	r1, [pc, #92]	; (80006c4 <esp8266_send_command+0x9c>)
 8000666:	4815      	ldr	r0, [pc, #84]	; (80006bc <esp8266_send_command+0x94>)
 8000668:	f003 fb84 	bl	8003d74 <strstr>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d003      	beq.n	800067a <esp8266_send_command+0x52>
			error_flag = true;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <esp8266_send_command+0x8c>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
			break;
 8000678:	e011      	b.n	800069e <esp8266_send_command+0x76>
		}
		if(strstr(rx_buffer, ESP8266_AT_FAIL) != NULL){
 800067a:	4913      	ldr	r1, [pc, #76]	; (80006c8 <esp8266_send_command+0xa0>)
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <esp8266_send_command+0x94>)
 800067e:	f003 fb79 	bl	8003d74 <strstr>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d003      	beq.n	8000690 <esp8266_send_command+0x68>
			fail_flag = true;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <esp8266_send_command+0x90>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
			break;
 800068e:	e006      	b.n	800069e <esp8266_send_command+0x76>
	while((strstr(rx_buffer, ESP8266_AT_OK_TERMINATOR) == NULL)){
 8000690:	490e      	ldr	r1, [pc, #56]	; (80006cc <esp8266_send_command+0xa4>)
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <esp8266_send_command+0x94>)
 8000694:	f003 fb6e 	bl	8003d74 <strstr>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0e2      	beq.n	8000664 <esp8266_send_command+0x3c>
		}
	}

	//HAL_UART_Transmit(&huart4, (uint8_t*) rx_buffer, strlen(rx_buffer), 100);
	//return evaluate(); would more efficient but not as clear in testing
	return get_return(command);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f860 	bl	8000764 <get_return>
 80006a4:	4603      	mov	r3, r0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200010c4 	.word	0x200010c4
 80006b4:	200010c5 	.word	0x200010c5
 80006b8:	200010c6 	.word	0x200010c6
 80006bc:	200000c4 	.word	0x200000c4
 80006c0:	200010d4 	.word	0x200010d4
 80006c4:	0800460c 	.word	0x0800460c
 80006c8:	08004614 	.word	0x08004614
 80006cc:	08004600 	.word	0x08004600

080006d0 <esp8266_initialize>:
/*void esp8266_get_wifi_command(char* ref){
	sprintf (ref, "%s\"%s\",\"%s\"\r\n", ESP8266_AT_CWJAP_SET, SSID, PWD);
}*/

void esp8266_initialize()
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b08f      	sub	sp, #60	; 0x3c
 80006d4:	af02      	add	r7, sp, #8
	//Step 1, enable interrupts
	init_uart_interrupt();
 80006d6:	f7ff ff53 	bl	8000580 <init_uart_interrupt>

	//Step 2, initialize station mode
	char set_ESP8266_mode[] = "AT+CWMODE=1\r\n";
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <esp8266_initialize+0x40>)
 80006dc:	f107 0420 	add.w	r4, r7, #32
 80006e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e2:	c407      	stmia	r4!, {r0, r1, r2}
 80006e4:	8023      	strh	r3, [r4, #0]
	//HAL_UART_Transmit(&huart2, (uint8_t *) set_ESP8266_mode, strlen(set_ESP8266_mode), 100); //For testing
	esp8266_send_command(set_ESP8266_mode);
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9c 	bl	8000628 <esp8266_send_command>

	//Step 3, connect to wifi using "networkinfo.h"
	char connect_wifi[30];
	sprintf (connect_wifi, "%s\"%s\",\"%s\"\r\n", ESP8266_AT_CWJAP_SET, SSID, PWD);
 80006f0:	4638      	mov	r0, r7
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <esp8266_initialize+0x44>)
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <esp8266_initialize+0x48>)
 80006f8:	4a08      	ldr	r2, [pc, #32]	; (800071c <esp8266_initialize+0x4c>)
 80006fa:	4909      	ldr	r1, [pc, #36]	; (8000720 <esp8266_initialize+0x50>)
 80006fc:	f003 fb1a 	bl	8003d34 <siprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t *) connect_wifi, strlen(connect_wifi), 100); //For testing
	esp8266_send_command(connect_wifi);
 8000700:	463b      	mov	r3, r7
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff90 	bl	8000628 <esp8266_send_command>

	return;
 8000708:	bf00      	nop
}
 800070a:	3734      	adds	r7, #52	; 0x34
 800070c:	46bd      	mov	sp, r7
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	0800459c 	.word	0x0800459c
 8000714:	2000000c 	.word	0x2000000c
 8000718:	20000000 	.word	0x20000000
 800071c:	0800471c 	.word	0x0800471c
 8000720:	0800458c 	.word	0x0800458c

08000724 <eps8266_connection>:
void esp8266_get_connection_command(char* ref, char* connection_type, char* remote_ip, char* remote_port){
	sprintf(ref, "%s\"%s\",\"%s\",%s\r\n", ESP8266_AT_START, connection_type, remote_ip, remote_port);
}

void eps8266_connection()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af02      	add	r7, sp, #8
	char tcp_connect[30];
	sprintf(tcp_connect, "%s\"%s\",\"%s\",%s\r\n", ESP8266_AT_START, connection_type, remote_ip, remote_port);
 800072a:	4638      	mov	r0, r7
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <eps8266_connection+0x2c>)
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <eps8266_connection+0x30>)
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <eps8266_connection+0x34>)
 8000736:	4a09      	ldr	r2, [pc, #36]	; (800075c <eps8266_connection+0x38>)
 8000738:	4909      	ldr	r1, [pc, #36]	; (8000760 <eps8266_connection+0x3c>)
 800073a:	f003 fafb 	bl	8003d34 <siprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t *) tcp_connect, strlen(tcp_connect), 100); //For testing
	esp8266_send_command(tcp_connect);
 800073e:	463b      	mov	r3, r7
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff71 	bl	8000628 <esp8266_send_command>
}
 8000746:	bf00      	nop
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000002c 	.word	0x2000002c
 8000754:	2000001c 	.word	0x2000001c
 8000758:	20000018 	.word	0x20000018
 800075c:	08004728 	.word	0x08004728
 8000760:	080045ac 	.word	0x080045ac

08000764 <get_return>:

/* Returns the ESP8266 response code that is in the rx_buffer as a string,
 * this makes debugging and verification through testing easier, at the
 * cost of simplicity.
 */
const char* get_return(const char* command){
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

	if(strstr(command, ESP8266_AT_CWJAP_SET) != NULL)
 800076c:	497b      	ldr	r1, [pc, #492]	; (800095c <get_return+0x1f8>)
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f003 fb00 	bl	8003d74 <strstr>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <get_return+0x1c>
		command = ESP8266_AT_CWJAP_SET;
 800077a:	4b78      	ldr	r3, [pc, #480]	; (800095c <get_return+0x1f8>)
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e012      	b.n	80007a6 <get_return+0x42>
	else if(strstr(command, ESP8266_AT_START) != NULL)
 8000780:	4977      	ldr	r1, [pc, #476]	; (8000960 <get_return+0x1fc>)
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f003 faf6 	bl	8003d74 <strstr>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <get_return+0x30>
		command = ESP8266_AT_START;
 800078e:	4b74      	ldr	r3, [pc, #464]	; (8000960 <get_return+0x1fc>)
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	e008      	b.n	80007a6 <get_return+0x42>
	else if(strstr(command, ESP8266_AT_SEND) != NULL)
 8000794:	4973      	ldr	r1, [pc, #460]	; (8000964 <get_return+0x200>)
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f003 faec 	bl	8003d74 <strstr>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <get_return+0x42>
		command = ESP8266_AT_SEND;
 80007a2:	4b70      	ldr	r3, [pc, #448]	; (8000964 <get_return+0x200>)
 80007a4:	607b      	str	r3, [r7, #4]

	KEYS return_type = hash(command);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff20 	bl	80005ec <hash>
 80007ac:	60f8      	str	r0, [r7, #12]
	switch (return_type) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4a6d      	ldr	r2, [pc, #436]	; (8000968 <get_return+0x204>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	f000 80c0 	beq.w	8000938 <get_return+0x1d4>
 80007b8:	4a6b      	ldr	r2, [pc, #428]	; (8000968 <get_return+0x204>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d813      	bhi.n	80007e6 <get_return+0x82>
 80007be:	4a6b      	ldr	r2, [pc, #428]	; (800096c <get_return+0x208>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d028      	beq.n	8000816 <get_return+0xb2>
 80007c4:	4a69      	ldr	r2, [pc, #420]	; (800096c <get_return+0x208>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d806      	bhi.n	80007d8 <get_return+0x74>
 80007ca:	4a69      	ldr	r2, [pc, #420]	; (8000970 <get_return+0x20c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d022      	beq.n	8000816 <get_return+0xb2>
 80007d0:	4a68      	ldr	r2, [pc, #416]	; (8000974 <get_return+0x210>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d01f      	beq.n	8000816 <get_return+0xb2>
 80007d6:	e0bb      	b.n	8000950 <get_return+0x1ec>
 80007d8:	4a67      	ldr	r2, [pc, #412]	; (8000978 <get_return+0x214>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d01b      	beq.n	8000816 <get_return+0xb2>
 80007de:	4a67      	ldr	r2, [pc, #412]	; (800097c <get_return+0x218>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d018      	beq.n	8000816 <get_return+0xb2>
 80007e4:	e0b4      	b.n	8000950 <get_return+0x1ec>
 80007e6:	4a66      	ldr	r2, [pc, #408]	; (8000980 <get_return+0x21c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d054      	beq.n	8000896 <get_return+0x132>
 80007ec:	4a64      	ldr	r2, [pc, #400]	; (8000980 <get_return+0x21c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d806      	bhi.n	8000800 <get_return+0x9c>
 80007f2:	4a64      	ldr	r2, [pc, #400]	; (8000984 <get_return+0x220>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d039      	beq.n	800086c <get_return+0x108>
 80007f8:	4a63      	ldr	r2, [pc, #396]	; (8000988 <get_return+0x224>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d00b      	beq.n	8000816 <get_return+0xb2>
 80007fe:	e0a7      	b.n	8000950 <get_return+0x1ec>
 8000800:	4a62      	ldr	r2, [pc, #392]	; (800098c <get_return+0x228>)
 8000802:	4293      	cmp	r3, r2
 8000804:	f000 808c 	beq.w	8000920 <get_return+0x1bc>
 8000808:	4a61      	ldr	r2, [pc, #388]	; (8000990 <get_return+0x22c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d007      	beq.n	800081e <get_return+0xba>
 800080e:	4a61      	ldr	r2, [pc, #388]	; (8000994 <get_return+0x230>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d070      	beq.n	80008f6 <get_return+0x192>
 8000814:	e09c      	b.n	8000950 <get_return+0x1ec>
		case ESP8266_AT_CWMODE_STATION_MODE_KEY:

		case ESP8266_AT_CIPMUX_KEY:

		case ESP8266_AT_CWQAP_KEY:
			return evaluate();
 8000816:	f000 f8ef 	bl	80009f8 <evaluate>
 800081a:	4603      	mov	r3, r0
 800081c:	e099      	b.n	8000952 <get_return+0x1ee>

		case ESP8266_AT_CWMODE_TEST_KEY:
			if(error_flag || fail_flag)
 800081e:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <get_return+0x234>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d103      	bne.n	800082e <get_return+0xca>
 8000826:	4b5d      	ldr	r3, [pc, #372]	; (800099c <get_return+0x238>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <get_return+0xce>
				return ESP8266_AT_ERROR;
 800082e:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <get_return+0x23c>)
 8000830:	e08f      	b.n	8000952 <get_return+0x1ee>
			else {
				if (strstr(rx_buffer, ESP8266_AT_CWMODE_1) != NULL)
 8000832:	495c      	ldr	r1, [pc, #368]	; (80009a4 <get_return+0x240>)
 8000834:	485c      	ldr	r0, [pc, #368]	; (80009a8 <get_return+0x244>)
 8000836:	f003 fa9d 	bl	8003d74 <strstr>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <get_return+0xe0>
					return ESP8266_AT_CWMODE_1;
 8000840:	4b58      	ldr	r3, [pc, #352]	; (80009a4 <get_return+0x240>)
 8000842:	e086      	b.n	8000952 <get_return+0x1ee>
				else if(strstr(rx_buffer, ESP8266_AT_CWMODE_2) != NULL)
 8000844:	4959      	ldr	r1, [pc, #356]	; (80009ac <get_return+0x248>)
 8000846:	4858      	ldr	r0, [pc, #352]	; (80009a8 <get_return+0x244>)
 8000848:	f003 fa94 	bl	8003d74 <strstr>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <get_return+0xf2>
					return ESP8266_AT_CWMODE_2;
 8000852:	4b56      	ldr	r3, [pc, #344]	; (80009ac <get_return+0x248>)
 8000854:	e07d      	b.n	8000952 <get_return+0x1ee>
				else if(strstr(rx_buffer, ESP8266_AT_CWMODE_3) != NULL)
 8000856:	4956      	ldr	r1, [pc, #344]	; (80009b0 <get_return+0x24c>)
 8000858:	4853      	ldr	r0, [pc, #332]	; (80009a8 <get_return+0x244>)
 800085a:	f003 fa8b 	bl	8003d74 <strstr>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <get_return+0x104>
					return ESP8266_AT_CWMODE_3;
 8000864:	4b52      	ldr	r3, [pc, #328]	; (80009b0 <get_return+0x24c>)
 8000866:	e074      	b.n	8000952 <get_return+0x1ee>
				else
					return ESP8266_AT_UNKNOWN;
 8000868:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <get_return+0x250>)
 800086a:	e072      	b.n	8000952 <get_return+0x1ee>
			}

		case ESP8266_AT_CWJAP_TEST_KEY:
			if(error_flag || fail_flag)
 800086c:	4b4a      	ldr	r3, [pc, #296]	; (8000998 <get_return+0x234>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d103      	bne.n	800087c <get_return+0x118>
 8000874:	4b49      	ldr	r3, [pc, #292]	; (800099c <get_return+0x238>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <get_return+0x11c>
				return ESP8266_AT_ERROR;
 800087c:	4b48      	ldr	r3, [pc, #288]	; (80009a0 <get_return+0x23c>)
 800087e:	e068      	b.n	8000952 <get_return+0x1ee>
			else {
				if(strstr(rx_buffer, ESP8266_AT_NO_AP))
 8000880:	494d      	ldr	r1, [pc, #308]	; (80009b8 <get_return+0x254>)
 8000882:	4849      	ldr	r0, [pc, #292]	; (80009a8 <get_return+0x244>)
 8000884:	f003 fa76 	bl	8003d74 <strstr>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <get_return+0x12e>
					return ESP8266_AT_WIFI_DISCONNECTED;
 800088e:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <get_return+0x258>)
 8000890:	e05f      	b.n	8000952 <get_return+0x1ee>
				else
					return ESP8266_AT_WIFI_CONNECTED;
 8000892:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <get_return+0x25c>)
 8000894:	e05d      	b.n	8000952 <get_return+0x1ee>
			}

		case ESP8266_AT_CWJAP_SET_KEY:
			if(fail_flag || error_flag){
 8000896:	4b41      	ldr	r3, [pc, #260]	; (800099c <get_return+0x238>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <get_return+0x142>
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <get_return+0x234>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d025      	beq.n	80008f2 <get_return+0x18e>
				if (strstr(rx_buffer, ESP8266_AT_CWJAP_1) != NULL)
 80008a6:	4947      	ldr	r1, [pc, #284]	; (80009c4 <get_return+0x260>)
 80008a8:	483f      	ldr	r0, [pc, #252]	; (80009a8 <get_return+0x244>)
 80008aa:	f003 fa63 	bl	8003d74 <strstr>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <get_return+0x154>
					return ESP8266_AT_TIMEOUT;
 80008b4:	4b44      	ldr	r3, [pc, #272]	; (80009c8 <get_return+0x264>)
 80008b6:	e04c      	b.n	8000952 <get_return+0x1ee>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_2) != NULL))
 80008b8:	4944      	ldr	r1, [pc, #272]	; (80009cc <get_return+0x268>)
 80008ba:	483b      	ldr	r0, [pc, #236]	; (80009a8 <get_return+0x244>)
 80008bc:	f003 fa5a 	bl	8003d74 <strstr>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <get_return+0x166>
					return ESP8266_AT_WRONG_PWD;
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <get_return+0x26c>)
 80008c8:	e043      	b.n	8000952 <get_return+0x1ee>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_3) != NULL))
 80008ca:	4942      	ldr	r1, [pc, #264]	; (80009d4 <get_return+0x270>)
 80008cc:	4836      	ldr	r0, [pc, #216]	; (80009a8 <get_return+0x244>)
 80008ce:	f003 fa51 	bl	8003d74 <strstr>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <get_return+0x178>
					return ESP8266_AT_NO_TARGET;
 80008d8:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <get_return+0x274>)
 80008da:	e03a      	b.n	8000952 <get_return+0x1ee>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_4) != NULL))
 80008dc:	493f      	ldr	r1, [pc, #252]	; (80009dc <get_return+0x278>)
 80008de:	4832      	ldr	r0, [pc, #200]	; (80009a8 <get_return+0x244>)
 80008e0:	f003 fa48 	bl	8003d74 <strstr>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <get_return+0x18a>
					return ESP8266_AT_CONNECTION_FAIL;
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <get_return+0x27c>)
 80008ec:	e031      	b.n	8000952 <get_return+0x1ee>
				else
					return ESP8266_AT_ERROR;
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <get_return+0x23c>)
 80008f0:	e02f      	b.n	8000952 <get_return+0x1ee>
			}
			else
				return ESP8266_AT_WIFI_CONNECTED;
 80008f2:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <get_return+0x25c>)
 80008f4:	e02d      	b.n	8000952 <get_return+0x1ee>

		case ESP8266_AT_CIPMUX_TEST_KEY:
			if(error_flag || fail_flag)
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <get_return+0x234>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d103      	bne.n	8000906 <get_return+0x1a2>
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <get_return+0x238>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <get_return+0x1a6>
				return ESP8266_AT_ERROR;
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <get_return+0x23c>)
 8000908:	e023      	b.n	8000952 <get_return+0x1ee>
			else {
				if (strstr(rx_buffer, ESP8266_AT_CIPMUX_0) != NULL)
 800090a:	4936      	ldr	r1, [pc, #216]	; (80009e4 <get_return+0x280>)
 800090c:	4826      	ldr	r0, [pc, #152]	; (80009a8 <get_return+0x244>)
 800090e:	f003 fa31 	bl	8003d74 <strstr>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <get_return+0x1b8>
					return ESP8266_AT_CIPMUX_0;
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <get_return+0x280>)
 800091a:	e01a      	b.n	8000952 <get_return+0x1ee>
				else
					return ESP8266_AT_CIPMUX_1;
 800091c:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <get_return+0x284>)
 800091e:	e018      	b.n	8000952 <get_return+0x1ee>
			}

		case ESP8266_AT_START_KEY:
			if(error_flag || fail_flag)
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <get_return+0x234>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <get_return+0x1cc>
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <get_return+0x238>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <get_return+0x1d0>
				return ESP8266_AT_ERROR;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <get_return+0x23c>)
 8000932:	e00e      	b.n	8000952 <get_return+0x1ee>
			return ESP8266_AT_CONNECT;
 8000934:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <get_return+0x288>)
 8000936:	e00c      	b.n	8000952 <get_return+0x1ee>

		case ESP8266_AT_SEND_KEY:
			if(error_flag || fail_flag)
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <get_return+0x234>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d103      	bne.n	8000948 <get_return+0x1e4>
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <get_return+0x238>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <get_return+0x1e8>
				return ESP8266_AT_ERROR;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <get_return+0x23c>)
 800094a:	e002      	b.n	8000952 <get_return+0x1ee>
			return ESP8266_AT_SEND_OK;
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <get_return+0x28c>)
 800094e:	e000      	b.n	8000952 <get_return+0x1ee>

		default:
			return ESP8266_NOT_IMPLEMENTED;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <get_return+0x290>)
			break;
	}
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	0800471c 	.word	0x0800471c
 8000960:	08004728 	.word	0x08004728
 8000964:	08004738 	.word	0x08004738
 8000968:	358a4068 	.word	0x358a4068
 800096c:	24047d02 	.word	0x24047d02
 8000970:	194200bf 	.word	0x194200bf
 8000974:	1a8dff78 	.word	0x1a8dff78
 8000978:	243fa9a9 	.word	0x243fa9a9
 800097c:	24cedd55 	.word	0x24cedd55
 8000980:	9bf0f337 	.word	0x9bf0f337
 8000984:	5bfaa730 	.word	0x5bfaa730
 8000988:	7c821b31 	.word	0x7c821b31
 800098c:	e7dadacc 	.word	0xe7dadacc
 8000990:	f5600f43 	.word	0xf5600f43
 8000994:	d9fa4211 	.word	0xd9fa4211
 8000998:	200010c5 	.word	0x200010c5
 800099c:	200010c6 	.word	0x200010c6
 80009a0:	0800460c 	.word	0x0800460c
 80009a4:	08004660 	.word	0x08004660
 80009a8:	200000c4 	.word	0x200000c4
 80009ac:	08004670 	.word	0x08004670
 80009b0:	08004680 	.word	0x08004680
 80009b4:	08004658 	.word	0x08004658
 80009b8:	08004650 	.word	0x08004650
 80009bc:	0800462c 	.word	0x0800462c
 80009c0:	0800461c 	.word	0x0800461c
 80009c4:	08004690 	.word	0x08004690
 80009c8:	080046b0 	.word	0x080046b0
 80009cc:	08004698 	.word	0x08004698
 80009d0:	080046c4 	.word	0x080046c4
 80009d4:	080046a0 	.word	0x080046a0
 80009d8:	080046d4 	.word	0x080046d4
 80009dc:	080046a8 	.word	0x080046a8
 80009e0:	080046f0 	.word	0x080046f0
 80009e4:	08004704 	.word	0x08004704
 80009e8:	08004710 	.word	0x08004710
 80009ec:	08004640 	.word	0x08004640
 80009f0:	08004648 	.word	0x08004648
 80009f4:	080045f0 	.word	0x080045f0

080009f8 <evaluate>:

const char* evaluate(void){
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
	if(error_flag || fail_flag)
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <evaluate+0x24>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d103      	bne.n	8000a0c <evaluate+0x14>
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <evaluate+0x28>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <evaluate+0x18>
		return ESP8266_AT_ERROR;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <evaluate+0x2c>)
 8000a0e:	e000      	b.n	8000a12 <evaluate+0x1a>
	return ESP8266_AT_OK;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <evaluate+0x30>)
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	200010c5 	.word	0x200010c5
 8000a20:	200010c6 	.word	0x200010c6
 8000a24:	0800460c 	.word	0x0800460c
 8000a28:	08004608 	.word	0x08004608

08000a2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a2a      	ldr	r2, [pc, #168]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a24      	ldr	r2, [pc, #144]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_GPIO_Init+0xc4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fe2b 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_GPIO_Init+0xc8>)
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_GPIO_Init+0xcc>)
 8000ac4:	f000 fc76 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac8:	2320      	movs	r3, #32
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 fc67 	bl	80013b4 <HAL_GPIO_Init>

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	10210000 	.word	0x10210000
 8000af8:	48000800 	.word	0x48000800

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fa8a 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f809 	bl	8000b1a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f7ff ff90 	bl	8000a2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b0c:	f000 f9ae 	bl	8000e6c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000b10:	f000 f97c 	bl	8000e0c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  Test_program();
 8000b14:	f000 f948 	bl	8000da8 <Test_program>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <main+0x1c>

08000b1a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b0b8      	sub	sp, #224	; 0xe0
 8000b1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b24:	2244      	movs	r2, #68	; 0x44
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f8fb 	bl	8003d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2288      	movs	r2, #136	; 0x88
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 f8ed 	bl	8003d24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b64:	2302      	movs	r3, #2
 8000b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b70:	230a      	movs	r3, #10
 8000b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b76:	2307      	movs	r3, #7
 8000b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fe35 	bl	80017fc <HAL_RCC_OscConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b98:	f000 f836 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fa01 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bcc:	f000 f81c 	bl	8000c08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 8000bd0:	230a      	movs	r3, #10
 8000bd2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fbf6 	bl	80023d0 <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bea:	f000 f80d 	bl	8000c08 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bf2:	f000 fdad 	bl	8001750 <HAL_PWREx_ControlVoltageScaling>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000bfc:	f000 f804 	bl	8000c08 <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	37e0      	adds	r7, #224	; 0xe0
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_MspInit+0x44>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x44>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x44>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6593      	str	r3, [r2, #88]	; 0x58
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x44>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 fa0c 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <UART4_IRQHandler+0x10>)
 8000cc2:	f002 f9b9 	bl	8003038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200010d4 	.word	0x200010d4

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f002 ffe6 	bl	8003cd0 <__errno>
 8000d04:	4602      	mov	r2, r0
 8000d06:	230c      	movs	r3, #12
 8000d08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20018000 	.word	0x20018000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	200010c8 	.word	0x200010c8
 8000d38:	200011e0 	.word	0x200011e0

08000d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <SystemInit+0x64>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <SystemInit+0x64>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <SystemInit+0x68>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <SystemInit+0x68>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <SystemInit+0x68>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <SystemInit+0x68>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <SystemInit+0x68>)
 8000d68:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d6c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <SystemInit+0x68>)
 8000d74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <SystemInit+0x68>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <SystemInit+0x68>)
 8000d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <SystemInit+0x68>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SystemInit+0x64>)
 8000d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d92:	609a      	str	r2, [r3, #8]
#endif
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00
 8000da4:	40021000 	.word	0x40021000

08000da8 <Test_program>:
static uint8_t rx_buffer_index = 0;
static bool error_flag = false;
static bool fail_flag = false;*/

void Test_program()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	Test_wifi_connect();
 8000dac:	f000 f806 	bl	8000dbc <Test_wifi_connect>
	Test_connection();
 8000db0:	f000 f80a 	bl	8000dc8 <Test_connection>
	Test_sendData();
 8000db4:	f000 f80e 	bl	8000dd4 <Test_sendData>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <Test_wifi_connect>:

void Test_wifi_connect()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart4, (uint8_t*) send_mode, strlen(send_mode), 100);

	esp8266_send_data("hej");*/

	esp8266_initialize();
 8000dc0:	f7ff fc86 	bl	80006d0 <esp8266_initialize>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <Test_connection>:

void Test_connection()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	eps8266_connection();
 8000dcc:	f7ff fcaa 	bl	8000724 <eps8266_connection>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <Test_sendData>:

void Test_sendData()
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
	char send_mode[] = "AT+CIPSEND=12\r\n";
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <Test_sendData+0x30>)
 8000ddc:	463c      	mov	r4, r7
 8000dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_UART_Transmit(&huart4, (uint8_t*) send_mode, strlen(send_mode), 100);
 8000de4:	463b      	mov	r3, r7
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff f9f2 	bl	80001d0 <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4639      	mov	r1, r7
 8000df2:	2364      	movs	r3, #100	; 0x64
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <Test_sendData+0x34>)
 8000df6:	f001 ffe9 	bl	8002dcc <HAL_UART_Transmit>

	//HAL_UART_Transmit(&huart2, (uint8_t *) set_ESP8266_mode, strlen(set_ESP8266_mode), 100);
	//HAL_UART_Transmit(&huart4, (uint8_t*) "hej", strlen("hej"), 100);
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	080045e0 	.word	0x080045e0
 8000e08:	200010d4 	.word	0x200010d4

08000e0c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e12:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <MX_UART4_Init+0x5c>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_UART4_Init+0x58>)
 8000e50:	f001 ff6e 	bl	8002d30 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e5a:	f7ff fed5 	bl	8000c08 <Error_Handler>
  }

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200010d4 	.word	0x200010d4
 8000e68:	40004c00 	.word	0x40004c00

08000e6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <MX_USART2_UART_Init+0x5c>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000eb0:	f001 ff3e 	bl	8002d30 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eba:	f7ff fea5 	bl	8000c08 <Error_Handler>
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20001154 	.word	0x20001154
 8000ec8:	40004400 	.word	0x40004400

08000ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a33      	ldr	r2, [pc, #204]	; (8000fb8 <HAL_UART_MspInit+0xec>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d131      	bne.n	8000f52 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a32      	ldr	r2, [pc, #200]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a2c      	ldr	r2, [pc, #176]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f000 fa3a 	bl	80013b4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2034      	movs	r0, #52	; 0x34
 8000f46:	f000 f9be 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f4a:	2034      	movs	r0, #52	; 0x34
 8000f4c:	f000 f9d7 	bl	80012fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f50:	e02d      	b.n	8000fae <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <HAL_UART_MspInit+0xf4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d128      	bne.n	8000fae <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f66:	6593      	str	r3, [r2, #88]	; 0x58
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0xf0>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f000 fa03 	bl	80013b4 <HAL_GPIO_Init>
}
 8000fae:	bf00      	nop
 8000fb0:	3730      	adds	r7, #48	; 0x30
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40004c00 	.word	0x40004c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc8:	f7ff feb8 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fce:	e003      	b.n	8000fd8 <LoopCopyDataInit>

08000fd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fd6:	3104      	adds	r1, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fe0:	d3f6      	bcc.n	8000fd0 <CopyDataInit>
	ldr	r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fe4:	e002      	b.n	8000fec <LoopFillZerobss>

08000fe6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fe6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fe8:	f842 3b04 	str.w	r3, [r2], #4

08000fec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <LoopForever+0x16>)
	cmp	r2, r3
 8000fee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ff0:	d3f9      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f002 fe73 	bl	8003cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ff6:	f7ff fd81 	bl	8000afc <main>

08000ffa <LoopForever>:

LoopForever:
    b LoopForever
 8000ffa:	e7fe      	b.n	8000ffa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ffc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001000:	080047d0 	.word	0x080047d0
	ldr	r0, =_sdata
 8001004:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001008:	200000a4 	.word	0x200000a4
	ldr	r2, =_sbss
 800100c:	200000a4 	.word	0x200000a4
	ldr	r3, = _ebss
 8001010:	200011dc 	.word	0x200011dc

08001014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_2_IRQHandler>
	...

08001018 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_Init+0x3c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_Init+0x3c>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102e:	2003      	movs	r0, #3
 8001030:	f000 f93e 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f80f 	bl	8001058 <HAL_InitTick>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	e001      	b.n	800104a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001046:	f7ff fde7 	bl	8000c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104a:	79fb      	ldrb	r3, [r7, #7]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40022000 	.word	0x40022000

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_InitTick+0x6c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_InitTick+0x70>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f949 	bl	800131a <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10f      	bne.n	80010ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d809      	bhi.n	80010a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f913 	bl	80012c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_InitTick+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e004      	b.n	80010b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e001      	b.n	80010b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000003c 	.word	0x2000003c
 80010c8:	20000034 	.word	0x20000034
 80010cc:	20000038 	.word	0x20000038

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000003c 	.word	0x2000003c
 80010f4:	200011d4 	.word	0x200011d4

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200011d4 	.word	0x200011d4

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d005      	beq.n	8001356 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2204      	movs	r2, #4
 800134e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e029      	b.n	80013aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 020e 	bic.w	r2, r2, #14
 8001364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0201 	bic.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f003 021c 	and.w	r2, r3, #28
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
    }
  }
  return status;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e17f      	b.n	80016c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8171 	beq.w	80016be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d00b      	beq.n	80013fc <HAL_GPIO_Init+0x48>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f0:	2b11      	cmp	r3, #17
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b12      	cmp	r3, #18
 80013fa:	d130      	bne.n	800145e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001432:	2201      	movs	r2, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f003 0201 	and.w	r2, r3, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b03      	cmp	r3, #3
 8001468:	d118      	bne.n	800149c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001470:	2201      	movs	r2, #1
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	f003 0201 	and.w	r2, r3, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x128>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b12      	cmp	r3, #18
 80014da:	d123      	bne.n	8001524 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3208      	adds	r2, #8
 800151e:	6939      	ldr	r1, [r7, #16]
 8001520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80ac 	beq.w	80016be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	4b5e      	ldr	r3, [pc, #376]	; (80016e0 <HAL_GPIO_Init+0x32c>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	4a5d      	ldr	r2, [pc, #372]	; (80016e0 <HAL_GPIO_Init+0x32c>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6613      	str	r3, [r2, #96]	; 0x60
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <HAL_GPIO_Init+0x32c>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800157e:	4a59      	ldr	r2, [pc, #356]	; (80016e4 <HAL_GPIO_Init+0x330>)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_Init+0x242>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4e      	ldr	r2, [pc, #312]	; (80016e8 <HAL_GPIO_Init+0x334>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01f      	beq.n	80015f2 <HAL_GPIO_Init+0x23e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4d      	ldr	r2, [pc, #308]	; (80016ec <HAL_GPIO_Init+0x338>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x23a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4c      	ldr	r2, [pc, #304]	; (80016f0 <HAL_GPIO_Init+0x33c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x236>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <HAL_GPIO_Init+0x340>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x232>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <HAL_GPIO_Init+0x344>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x22e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a49      	ldr	r2, [pc, #292]	; (80016fc <HAL_GPIO_Init+0x348>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x22a>
 80015da:	2306      	movs	r3, #6
 80015dc:	e00c      	b.n	80015f8 <HAL_GPIO_Init+0x244>
 80015de:	2307      	movs	r3, #7
 80015e0:	e00a      	b.n	80015f8 <HAL_GPIO_Init+0x244>
 80015e2:	2305      	movs	r3, #5
 80015e4:	e008      	b.n	80015f8 <HAL_GPIO_Init+0x244>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x244>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x244>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x244>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x244>
 80015f6:	2300      	movs	r3, #0
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	f002 0203 	and.w	r2, r2, #3
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4093      	lsls	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001608:	4936      	ldr	r1, [pc, #216]	; (80016e4 <HAL_GPIO_Init+0x330>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001616:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <HAL_GPIO_Init+0x34c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163a:	4a31      	ldr	r2, [pc, #196]	; (8001700 <HAL_GPIO_Init+0x34c>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_GPIO_Init+0x34c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001664:	4a26      	ldr	r2, [pc, #152]	; (8001700 <HAL_GPIO_Init+0x34c>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_GPIO_Init+0x34c>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_GPIO_Init+0x34c>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_GPIO_Init+0x34c>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_GPIO_Init+0x34c>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f ae78 	bne.w	80013c4 <HAL_GPIO_Init+0x10>
  }
}
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	48000400 	.word	0x48000400
 80016ec:	48000800 	.word	0x48000800
 80016f0:	48000c00 	.word	0x48000c00
 80016f4:	48001000 	.word	0x48001000
 80016f8:	48001400 	.word	0x48001400
 80016fc:	48001800 	.word	0x48001800
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001720:	e002      	b.n	8001728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_PWREx_GetVoltageRange+0x18>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40007000 	.word	0x40007000

08001750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800175e:	d130      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176c:	d038      	beq.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2232      	movs	r2, #50	; 0x32
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001794:	e002      	b.n	800179c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b01      	subs	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a8:	d102      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f2      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017bc:	d110      	bne.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e00f      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d007      	beq.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d8:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40007000 	.word	0x40007000
 80017f4:	20000034 	.word	0x20000034
 80017f8:	431bde83 	.word	0x431bde83

080017fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e3d4      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180e:	4ba1      	ldr	r3, [pc, #644]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001818:	4b9e      	ldr	r3, [pc, #632]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80e4 	beq.w	80019f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <HAL_RCC_OscConfig+0x4a>
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	f040 808b 	bne.w	8001954 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b01      	cmp	r3, #1
 8001842:	f040 8087 	bne.w	8001954 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001846:	4b93      	ldr	r3, [pc, #588]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x62>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e3ac      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_RCC_OscConfig+0x7c>
 800186e:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001876:	e005      	b.n	8001884 <HAL_RCC_OscConfig+0x88>
 8001878:	4b86      	ldr	r3, [pc, #536]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001884:	4293      	cmp	r3, r2
 8001886:	d223      	bcs.n	80018d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fd3f 	bl	8002310 <RCC_SetFlashLatencyFromMSIRange>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e38d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189c:	4b7d      	ldr	r3, [pc, #500]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a7c      	ldr	r2, [pc, #496]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b7a      	ldr	r3, [pc, #488]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4977      	ldr	r1, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ba:	4b76      	ldr	r3, [pc, #472]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4972      	ldr	r1, [pc, #456]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
 80018ce:	e025      	b.n	800191c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d0:	4b70      	ldr	r3, [pc, #448]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a6f      	ldr	r2, [pc, #444]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b6d      	ldr	r3, [pc, #436]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	496a      	ldr	r1, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ee:	4b69      	ldr	r3, [pc, #420]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	4965      	ldr	r1, [pc, #404]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fcff 	bl	8002310 <RCC_SetFlashLatencyFromMSIRange>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e34d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800191c:	f000 fc36 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8001920:	4601      	mov	r1, r0
 8001922:	4b5c      	ldr	r3, [pc, #368]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	4a5a      	ldr	r2, [pc, #360]	; (8001a98 <HAL_RCC_OscConfig+0x29c>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	fa21 f303 	lsr.w	r3, r1, r3
 8001938:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_RCC_OscConfig+0x2a0>)
 800193a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800193c:	4b58      	ldr	r3, [pc, #352]	; (8001aa0 <HAL_RCC_OscConfig+0x2a4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fb89 	bl	8001058 <HAL_InitTick>
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d052      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	e331      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d032      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800195c:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001968:	f7ff fbc6 	bl	80010f8 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001970:	f7ff fbc2 	bl	80010f8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e31a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001982:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198e:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	493b      	ldr	r1, [pc, #236]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ac:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	4936      	ldr	r1, [pc, #216]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
 80019c0:	e01a      	b.n	80019f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fb93 	bl	80010f8 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d6:	f7ff fb8f 	bl	80010f8 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e2e7      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x1da>
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d074      	beq.n	8001aee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x21a>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	d10e      	bne.n	8001a2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d10b      	bne.n	8001a2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d064      	beq.n	8001aec <HAL_RCC_OscConfig+0x2f0>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d160      	bne.n	8001aec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e2c4      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x24a>
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e01d      	b.n	8001a82 <HAL_RCC_OscConfig+0x286>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x26e>
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x286>
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fb35 	bl	80010f8 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a90:	e011      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2ba>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	08004744 	.word	0x08004744
 8001a9c:	20000034 	.word	0x20000034
 8001aa0:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fb28 	bl	80010f8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e280      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	4baf      	ldr	r3, [pc, #700]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2a8>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb18 	bl	80010f8 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fb14 	bl	80010f8 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e26c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ade:	4ba5      	ldr	r3, [pc, #660]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x2d0>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d060      	beq.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_OscConfig+0x310>
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d119      	bne.n	8001b3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d116      	bne.n	8001b3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0c:	4b99      	ldr	r3, [pc, #612]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_OscConfig+0x328>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e249      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b93      	ldr	r3, [pc, #588]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	061b      	lsls	r3, r3, #24
 8001b32:	4990      	ldr	r1, [pc, #576]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	e040      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d023      	beq.n	8001b8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b42:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a8b      	ldr	r2, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fad3 	bl	80010f8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff facf 	bl	80010f8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e227      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b68:	4b82      	ldr	r3, [pc, #520]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	497c      	ldr	r1, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e018      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a79      	ldr	r2, [pc, #484]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff faaf 	bl	80010f8 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff faab 	bl	80010f8 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e203      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb0:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d03c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fa8a 	bl	80010f8 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fa86 	bl	80010f8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1de      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ef      	beq.n	8001be8 <HAL_RCC_OscConfig+0x3ec>
 8001c08:	e01b      	b.n	8001c42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0a:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c10:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fa6d 	bl	80010f8 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c22:	f7ff fa69 	bl	80010f8 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1c1      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c34:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ef      	bne.n	8001c22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a6 	beq.w	8001d9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c54:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10d      	bne.n	8001c7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	4a43      	ldr	r2, [pc, #268]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6c:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <HAL_RCC_OscConfig+0x57c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d118      	bne.n	8001cba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c88:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x57c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <HAL_RCC_OscConfig+0x57c>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c94:	f7ff fa30 	bl	80010f8 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9c:	f7ff fa2c 	bl	80010f8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e184      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_RCC_OscConfig+0x57c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4d8>
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd2:	e024      	b.n	8001d1e <HAL_RCC_OscConfig+0x522>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d110      	bne.n	8001cfe <HAL_RCC_OscConfig+0x502>
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	4a24      	ldr	r2, [pc, #144]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cfc:	e00f      	b.n	8001d1e <HAL_RCC_OscConfig+0x522>
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d16:	f023 0304 	bic.w	r3, r3, #4
 8001d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d016      	beq.n	8001d54 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff f9e7 	bl	80010f8 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f9e3 	bl	80010f8 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e139      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ed      	beq.n	8001d2e <HAL_RCC_OscConfig+0x532>
 8001d52:	e01a      	b.n	8001d8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f9d0 	bl	80010f8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d5a:	e00f      	b.n	8001d7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f9cc 	bl	80010f8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d906      	bls.n	8001d7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e122      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d7c:	4b90      	ldr	r3, [pc, #576]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e8      	bne.n	8001d5c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	4a8a      	ldr	r2, [pc, #552]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8108 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	f040 80d0 	bne.w	8001f50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001db0:	4b83      	ldr	r3, [pc, #524]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d130      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d127      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d11f      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df0:	2a07      	cmp	r2, #7
 8001df2:	bf14      	ite	ne
 8001df4:	2201      	movne	r2, #1
 8001df6:	2200      	moveq	r2, #0
 8001df8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d113      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d06e      	beq.n	8001f04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d069      	beq.n	8001f00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e2c:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e38:	4b61      	ldr	r3, [pc, #388]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b7      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e48:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e54:	f7ff f950 	bl	80010f8 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f94c 	bl	80010f8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e0a4      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7a:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <HAL_RCC_OscConfig+0x7c8>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e8a:	3a01      	subs	r2, #1
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e94:	0212      	lsls	r2, r2, #8
 8001e96:	4311      	orrs	r1, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e9c:	0852      	lsrs	r2, r2, #1
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	0552      	lsls	r2, r2, #21
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ea8:	0852      	lsrs	r2, r2, #1
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	0652      	lsls	r2, r2, #25
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb4:	0912      	lsrs	r2, r2, #4
 8001eb6:	0452      	lsls	r2, r2, #17
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	4941      	ldr	r1, [pc, #260]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a3b      	ldr	r2, [pc, #236]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed8:	f7ff f90e 	bl	80010f8 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff f90a 	bl	80010f8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e062      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efe:	e05a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e059      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f04:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d152      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f28:	f7ff f8e6 	bl	80010f8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff f8e2 	bl	80010f8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e03a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x734>
 8001f4e:	e032      	b.n	8001fb6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d02d      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f60:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f74:	f023 0303 	bic.w	r3, r3, #3
 8001f78:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001f80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f88:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f8b5 	bl	80010f8 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff f8b1 	bl	80010f8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_OscConfig+0x7c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x796>
 8001fb0:	e001      	b.n	8001fb6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	f99d808c 	.word	0xf99d808c

08001fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0c8      	b.n	800216e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_RCC_ClockConfig+0x1b0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d910      	bls.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_RCC_ClockConfig+0x1b0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4961      	ldr	r1, [pc, #388]	; (8002178 <HAL_RCC_ClockConfig+0x1b0>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <HAL_RCC_ClockConfig+0x1b0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b0      	b.n	800216e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d04c      	beq.n	80020b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002020:	4b56      	ldr	r3, [pc, #344]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d121      	bne.n	8002070 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e09e      	b.n	800216e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002038:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d115      	bne.n	8002070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e092      	b.n	800216e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e086      	b.n	800216e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002060:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e07e      	b.n	800216e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 0203 	bic.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	493f      	ldr	r1, [pc, #252]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002082:	f7ff f839 	bl	80010f8 <HAL_GetTick>
 8002086:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208a:	f7ff f835 	bl	80010f8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e066      	b.n	800216e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 020c 	and.w	r2, r3, #12
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d1eb      	bne.n	800208a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	492c      	ldr	r1, [pc, #176]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_ClockConfig+0x1b0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d210      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_RCC_ClockConfig+0x1b0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4924      	ldr	r1, [pc, #144]	; (8002178 <HAL_RCC_ClockConfig+0x1b0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_RCC_ClockConfig+0x1b0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e036      	b.n	800216e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4918      	ldr	r1, [pc, #96]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4910      	ldr	r1, [pc, #64]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800213e:	f000 f825 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCC_ClockConfig+0x1b4>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	fa21 f303 	lsr.w	r3, r1, r3
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe ff78 	bl	8001058 <HAL_InitTick>
 8002168:	4603      	mov	r3, r0
 800216a:	72fb      	strb	r3, [r7, #11]

  return status;
 800216c:	7afb      	ldrb	r3, [r7, #11]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	08004744 	.word	0x08004744
 8002184:	20000034 	.word	0x20000034
 8002188:	20000038 	.word	0x20000038

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x34>
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d121      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d11e      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021e8:	4a2a      	ldr	r2, [pc, #168]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d102      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e004      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d101      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_GetSysClockFreq+0x110>)
 8002212:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d133      	bne.n	8002282 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0xa4>
 800222a:	2b03      	cmp	r3, #3
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0xaa>
 800222e:	e005      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002232:	617b      	str	r3, [r7, #20]
      break;
 8002234:	e005      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_GetSysClockFreq+0x110>)
 8002238:	617b      	str	r3, [r7, #20]
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	617b      	str	r3, [r7, #20]
      break;
 8002240:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	3301      	adds	r3, #1
 800224e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	fb02 f203 	mul.w	r2, r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_GetSysClockFreq+0x104>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0e5b      	lsrs	r3, r3, #25
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	3301      	adds	r3, #1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002282:	69bb      	ldr	r3, [r7, #24]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3724      	adds	r7, #36	; 0x24
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40021000 	.word	0x40021000
 8002294:	0800475c 	.word	0x0800475c
 8002298:	00f42400 	.word	0x00f42400
 800229c:	007a1200 	.word	0x007a1200

080022a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000034 	.word	0x20000034

080022b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022bc:	f7ff fff0 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 80022c0:	4601      	mov	r1, r0
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08004754 	.word	0x08004754

080022e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022e8:	f7ff ffda 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 80022ec:	4601      	mov	r1, r0
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	0adb      	lsrs	r3, r3, #11
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_RCC_GetPCLK2Freq+0x28>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	08004754 	.word	0x08004754

08002310 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002328:	f7ff fa04 	bl	8001734 <HAL_PWREx_GetVoltageRange>
 800232c:	6178      	str	r0, [r7, #20]
 800232e:	e014      	b.n	800235a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233a:	6593      	str	r3, [r2, #88]	; 0x58
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002348:	f7ff f9f4 	bl	8001734 <HAL_PWREx_GetVoltageRange>
 800234c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002360:	d10b      	bne.n	800237a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b80      	cmp	r3, #128	; 0x80
 8002366:	d919      	bls.n	800239c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2ba0      	cmp	r3, #160	; 0xa0
 800236c:	d902      	bls.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800236e:	2302      	movs	r3, #2
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e013      	b.n	800239c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002374:	2301      	movs	r3, #1
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	e010      	b.n	800239c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b80      	cmp	r3, #128	; 0x80
 800237e:	d902      	bls.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002380:	2303      	movs	r3, #3
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	e00a      	b.n	800239c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b80      	cmp	r3, #128	; 0x80
 800238a:	d102      	bne.n	8002392 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800238c:	2302      	movs	r3, #2
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	e004      	b.n	800239c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b70      	cmp	r3, #112	; 0x70
 8002396:	d101      	bne.n	800239c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002398:	2301      	movs	r3, #1
 800239a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 0207 	bic.w	r2, r3, #7
 80023a4:	4909      	ldr	r1, [pc, #36]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40022000 	.word	0x40022000

080023d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023d8:	2300      	movs	r3, #0
 80023da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023dc:	2300      	movs	r3, #0
 80023de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d03f      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f4:	d01c      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80023f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fa:	d802      	bhi.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002400:	e01f      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002406:	d003      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002408:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800240c:	d01c      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800240e:	e018      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002410:	4b85      	ldr	r3, [pc, #532]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a84      	ldr	r2, [pc, #528]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800241c:	e015      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fab9 	bl	800299c <RCCEx_PLLSAI1_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800242e:	e00c      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3320      	adds	r3, #32
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fba0 	bl	8002b7c <RCCEx_PLLSAI2_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002440:	e003      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	74fb      	strb	r3, [r7, #19]
      break;
 8002446:	e000      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002450:	4b75      	ldr	r3, [pc, #468]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800245e:	4972      	ldr	r1, [pc, #456]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002466:	e001      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d03f      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002480:	d01c      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002486:	d802      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xda>
 800248c:	e01f      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800248e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002492:	d003      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002494:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002498:	d01c      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800249a:	e018      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800249c:	4b62      	ldr	r3, [pc, #392]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a61      	ldr	r2, [pc, #388]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024a8:	e015      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fa73 	bl	800299c <RCCEx_PLLSAI1_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024ba:	e00c      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3320      	adds	r3, #32
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fb5a 	bl	8002b7c <RCCEx_PLLSAI2_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024cc:	e003      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	74fb      	strb	r3, [r7, #19]
      break;
 80024d2:	e000      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80024d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024dc:	4b52      	ldr	r3, [pc, #328]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ea:	494f      	ldr	r1, [pc, #316]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024f2:	e001      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a0 	beq.w	8002646 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00d      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	4a40      	ldr	r2, [pc, #256]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6593      	str	r3, [r2, #88]	; 0x58
 800252c:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002538:	2301      	movs	r3, #1
 800253a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253c:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a3a      	ldr	r2, [pc, #232]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002548:	f7fe fdd6 	bl	80010f8 <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800254e:	e009      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002550:	f7fe fdd2 	bl	80010f8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	74fb      	strb	r3, [r7, #19]
        break;
 8002562:	e005      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002564:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ef      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d15c      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002576:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002580:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01f      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d019      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7fe fd91 	bl	80010f8 <HAL_GetTick>
 80025d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d8:	e00b      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fd8d 	bl	80010f8 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d902      	bls.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	74fb      	strb	r3, [r7, #19]
            break;
 80025f0:	e006      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ec      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10c      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002616:	4904      	ldr	r1, [pc, #16]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800261e:	e009      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
 8002624:	e006      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002634:	7c7b      	ldrb	r3, [r7, #17]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b9e      	ldr	r3, [pc, #632]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	4a9d      	ldr	r2, [pc, #628]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002644:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002652:	4b98      	ldr	r3, [pc, #608]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f023 0203 	bic.w	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	4994      	ldr	r1, [pc, #592]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002674:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 020c 	bic.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	498c      	ldr	r1, [pc, #560]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002696:	4b87      	ldr	r3, [pc, #540]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	4983      	ldr	r1, [pc, #524]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026b8:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	497b      	ldr	r1, [pc, #492]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026da:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e8:	4972      	ldr	r1, [pc, #456]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026fc:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	496a      	ldr	r1, [pc, #424]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800271e:	4b65      	ldr	r3, [pc, #404]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	4961      	ldr	r1, [pc, #388]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002740:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	4959      	ldr	r1, [pc, #356]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002762:	4b54      	ldr	r3, [pc, #336]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002770:	4950      	ldr	r1, [pc, #320]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002784:	4b4b      	ldr	r3, [pc, #300]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	4948      	ldr	r1, [pc, #288]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a6:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	493f      	ldr	r1, [pc, #252]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d028      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c8:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d6:	4937      	ldr	r1, [pc, #220]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e6:	d106      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e8:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a31      	ldr	r2, [pc, #196]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f2:	60d3      	str	r3, [r2, #12]
 80027f4:	e011      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027fe:	d10c      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	2101      	movs	r1, #1
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f8c8 	bl	800299c <RCCEx_PLLSAI1_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002816:	7cfb      	ldrb	r3, [r7, #19]
 8002818:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d028      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002826:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	491f      	ldr	r1, [pc, #124]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002844:	d106      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800284c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002850:	60d3      	str	r3, [r2, #12]
 8002852:	e011      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800285c:	d10c      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	2101      	movs	r1, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f899 	bl	800299c <RCCEx_PLLSAI1_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d02b      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a2:	d109      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a02      	ldr	r2, [pc, #8]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ae:	60d3      	str	r3, [r2, #12]
 80028b0:	e014      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2101      	movs	r1, #1
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f867 	bl	800299c <RCCEx_PLLSAI1_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d02f      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f6:	4928      	ldr	r1, [pc, #160]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002906:	d10d      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f844 	bl	800299c <RCCEx_PLLSAI1_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d014      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	74bb      	strb	r3, [r7, #18]
 8002922:	e011      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800292c:	d10c      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3320      	adds	r3, #32
 8002932:	2102      	movs	r1, #2
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f921 	bl	8002b7c <RCCEx_PLLSAI2_Config>
 800293a:	4603      	mov	r3, r0
 800293c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002954:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002962:	490d      	ldr	r1, [pc, #52]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002986:	4904      	ldr	r1, [pc, #16]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800298e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000

0800299c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029aa:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d018      	beq.n	80029e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029b6:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0203 	and.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10d      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
       ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ce:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
       ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d044      	beq.n	8002a6c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	e041      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d00c      	beq.n	8002a0a <RCCEx_PLLSAI1_Config+0x6e>
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d013      	beq.n	8002a1c <RCCEx_PLLSAI1_Config+0x80>
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d120      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029f8:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11d      	bne.n	8002a40 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a08:	e01a      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a0a:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d116      	bne.n	8002a44 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a1a:	e013      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10f      	bne.n	8002a48 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a38:	e006      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3e:	e004      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002a40:	bf00      	nop
 8002a42:	e002      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002a44:	bf00      	nop
 8002a46:	e000      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002a48:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a50:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	430b      	orrs	r3, r1
 8002a66:	4944      	ldr	r1, [pc, #272]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d17d      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a72:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a40      	ldr	r2, [pc, #256]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fb3b 	bl	80010f8 <HAL_GetTick>
 8002a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a84:	e009      	b.n	8002a9a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a86:	f7fe fb37 	bl	80010f8 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d902      	bls.n	8002a9a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	73fb      	strb	r3, [r7, #15]
        break;
 8002a98:	e005      	b.n	8002aa6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ef      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d160      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d111      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6892      	ldr	r2, [r2, #8]
 8002ac2:	0211      	lsls	r1, r2, #8
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68d2      	ldr	r2, [r2, #12]
 8002ac8:	0912      	lsrs	r2, r2, #4
 8002aca:	0452      	lsls	r2, r2, #17
 8002acc:	430a      	orrs	r2, r1
 8002ace:	492a      	ldr	r1, [pc, #168]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	610b      	str	r3, [r1, #16]
 8002ad4:	e027      	b.n	8002b26 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d112      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	0211      	lsls	r1, r2, #8
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6912      	ldr	r2, [r2, #16]
 8002af2:	0852      	lsrs	r2, r2, #1
 8002af4:	3a01      	subs	r2, #1
 8002af6:	0552      	lsls	r2, r2, #21
 8002af8:	430a      	orrs	r2, r1
 8002afa:	491f      	ldr	r1, [pc, #124]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	610b      	str	r3, [r1, #16]
 8002b00:	e011      	b.n	8002b26 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6892      	ldr	r2, [r2, #8]
 8002b12:	0211      	lsls	r1, r2, #8
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6952      	ldr	r2, [r2, #20]
 8002b18:	0852      	lsrs	r2, r2, #1
 8002b1a:	3a01      	subs	r2, #1
 8002b1c:	0652      	lsls	r2, r2, #25
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	4915      	ldr	r1, [pc, #84]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7fe fae1 	bl	80010f8 <HAL_GetTick>
 8002b36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b38:	e009      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b3a:	f7fe fadd 	bl	80010f8 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d902      	bls.n	8002b4e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b4c:	e005      	b.n	8002b5a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ef      	beq.n	8002b3a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4903      	ldr	r1, [pc, #12]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000

08002b7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b8a:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b96:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d10d      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bae:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d044      	beq.n	8002c4c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	e041      	b.n	8002c4c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d00c      	beq.n	8002bea <RCCEx_PLLSAI2_Config+0x6e>
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d013      	beq.n	8002bfc <RCCEx_PLLSAI2_Config+0x80>
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d120      	bne.n	8002c1a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bd8:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11d      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be8:	e01a      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d116      	bne.n	8002c24 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfa:	e013      	b.n	8002c24 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bfc:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10f      	bne.n	8002c28 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c18:	e006      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1e:	e004      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c20:	bf00      	nop
 8002c22:	e002      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c28:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c30:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	430b      	orrs	r3, r1
 8002c46:	4939      	ldr	r1, [pc, #228]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d167      	bne.n	8002d22 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5e:	f7fe fa4b 	bl	80010f8 <HAL_GetTick>
 8002c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c64:	e009      	b.n	8002c7a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c66:	f7fe fa47 	bl	80010f8 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d902      	bls.n	8002c7a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	73fb      	strb	r3, [r7, #15]
        break;
 8002c78:	e005      	b.n	8002c86 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ef      	bne.n	8002c66 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d14a      	bne.n	8002d22 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d111      	bne.n	8002cb6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c92:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6892      	ldr	r2, [r2, #8]
 8002ca2:	0211      	lsls	r1, r2, #8
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68d2      	ldr	r2, [r2, #12]
 8002ca8:	0912      	lsrs	r2, r2, #4
 8002caa:	0452      	lsls	r2, r2, #17
 8002cac:	430a      	orrs	r2, r1
 8002cae:	491f      	ldr	r1, [pc, #124]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	614b      	str	r3, [r1, #20]
 8002cb4:	e011      	b.n	8002cda <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	0211      	lsls	r1, r2, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6912      	ldr	r2, [r2, #16]
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0652      	lsls	r2, r2, #25
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	4915      	ldr	r1, [pc, #84]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fa07 	bl	80010f8 <HAL_GetTick>
 8002cea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cec:	e009      	b.n	8002d02 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cee:	f7fe fa03 	bl	80010f8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d902      	bls.n	8002d02 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8002d00:	e005      	b.n	8002d0e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ef      	beq.n	8002cee <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e040      	b.n	8002dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe f8ba 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fabe 	bl	80032f0 <UART_SetConfig>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e022      	b.n	8002dc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fd3c 	bl	8003804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fdc3 	bl	8003948 <UART_CheckIdleState>
 8002dc2:	4603      	mov	r3, r0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	f040 8081 	bne.w	8002ee8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_UART_Transmit+0x26>
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e079      	b.n	8002eea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_UART_Transmit+0x38>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e072      	b.n	8002eea <HAL_UART_Transmit+0x11e>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2221      	movs	r2, #33	; 0x21
 8002e16:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002e18:	f7fe f96e 	bl	80010f8 <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e36:	d108      	bne.n	8002e4a <HAL_UART_Transmit+0x7e>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e003      	b.n	8002e52 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002e5a:	e02d      	b.n	8002eb8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fdb3 	bl	80039d2 <UART_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e039      	b.n	8002eea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	881a      	ldrh	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e88:	b292      	uxth	r2, r2
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	3302      	adds	r3, #2
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e008      	b.n	8002ea6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1cb      	bne.n	8002e5c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2140      	movs	r1, #64	; 0x40
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fd7f 	bl	80039d2 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e005      	b.n	8002eea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	f040 808a 	bne.w	8003020 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_UART_Receive_IT+0x24>
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e082      	b.n	8003022 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Receive_IT+0x36>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e07b      	b.n	8003022 <HAL_UART_Receive_IT+0x12e>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d10e      	bne.n	8002f76 <HAL_UART_Receive_IT+0x82>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_UART_Receive_IT+0x78>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f6a:	e02d      	b.n	8002fc8 <HAL_UART_Receive_IT+0xd4>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	22ff      	movs	r2, #255	; 0xff
 8002f70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f74:	e028      	b.n	8002fc8 <HAL_UART_Receive_IT+0xd4>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10d      	bne.n	8002f9a <HAL_UART_Receive_IT+0xa6>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <HAL_UART_Receive_IT+0x9c>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f8e:	e01b      	b.n	8002fc8 <HAL_UART_Receive_IT+0xd4>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	227f      	movs	r2, #127	; 0x7f
 8002f94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f98:	e016      	b.n	8002fc8 <HAL_UART_Receive_IT+0xd4>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_UART_Receive_IT+0xcc>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <HAL_UART_Receive_IT+0xc2>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	227f      	movs	r2, #127	; 0x7f
 8002fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fb4:	e008      	b.n	8002fc8 <HAL_UART_Receive_IT+0xd4>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	223f      	movs	r2, #63	; 0x3f
 8002fba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fbe:	e003      	b.n	8002fc8 <HAL_UART_Receive_IT+0xd4>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2222      	movs	r2, #34	; 0x22
 8002fd2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fec:	d107      	bne.n	8002ffe <HAL_UART_Receive_IT+0x10a>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <HAL_UART_Receive_IT+0x13c>)
 8002ffa:	661a      	str	r2, [r3, #96]	; 0x60
 8002ffc:	e002      	b.n	8003004 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <HAL_UART_Receive_IT+0x140>)
 8003002:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800301a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	08003c11 	.word	0x08003c11
 8003034:	08003b67 	.word	0x08003b67

08003038 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	f640 030f 	movw	r3, #2063	; 0x80f
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d113      	bne.n	8003090 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00e      	beq.n	8003090 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d009      	beq.n	8003090 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8114 	beq.w	80032ae <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
      }
      return;
 800308e:	e10e      	b.n	80032ae <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80d6 	beq.w	8003244 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4b86      	ldr	r3, [pc, #536]	; (80032c0 <HAL_UART_IRQHandler+0x288>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80cb 	beq.w	8003244 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <HAL_UART_IRQHandler+0x9e>
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <HAL_UART_IRQHandler+0xc6>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2202      	movs	r2, #2
 80030f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <HAL_UART_IRQHandler+0xee>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2204      	movs	r2, #4
 8003118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800311e:	f043 0202 	orr.w	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003140:	2b00      	cmp	r3, #0
 8003142:	d009      	beq.n	8003158 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2208      	movs	r2, #8
 800314a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003150:	f043 0208 	orr.w	r2, r3, #8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00f      	beq.n	8003182 <HAL_UART_IRQHandler+0x14a>
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317a:	f043 0220 	orr.w	r2, r3, #32
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8093 	beq.w	80032b2 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d004      	beq.n	80031ce <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d031      	beq.n	8003232 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fc7a 	bl	8003ac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d123      	bne.n	800322a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d013      	beq.n	8003222 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fe:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <HAL_UART_IRQHandler+0x28c>)
 8003200:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe f893 	bl	8001332 <HAL_DMA_Abort_IT>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e00e      	b.n	8003240 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f85a 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e00a      	b.n	8003240 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f856 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e006      	b.n	8003240 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f852 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800323e:	e038      	b.n	80032b2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	bf00      	nop
    return;
 8003242:	e036      	b.n	80032b2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_UART_IRQHandler+0x232>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003260:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fd29 	bl	8003cba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003268:	e026      	b.n	80032b8 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003282:	2b00      	cmp	r3, #0
 8003284:	d017      	beq.n	80032b6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
    }
    return;
 800328e:	e012      	b.n	80032b6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00e      	beq.n	80032b8 <HAL_UART_IRQHandler+0x280>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fc45 	bl	8003b34 <UART_EndTransmit_IT>
    return;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <HAL_UART_IRQHandler+0x280>
      return;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <HAL_UART_IRQHandler+0x280>
    return;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_UART_IRQHandler+0x280>
    return;
 80032b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	04000120 	.word	0x04000120
 80032c4:	08003b09 	.word	0x08003b09

080032c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4313      	orrs	r3, r2
 8003314:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4bac      	ldr	r3, [pc, #688]	; (80035d0 <UART_SetConfig+0x2e0>)
 800331e:	4013      	ands	r3, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	69f9      	ldr	r1, [r7, #28]
 8003326:	430b      	orrs	r3, r1
 8003328:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4aa2      	ldr	r2, [pc, #648]	; (80035d4 <UART_SetConfig+0x2e4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	4313      	orrs	r3, r2
 8003358:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a99      	ldr	r2, [pc, #612]	; (80035d8 <UART_SetConfig+0x2e8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d121      	bne.n	80033bc <UART_SetConfig+0xcc>
 8003378:	4b98      	ldr	r3, [pc, #608]	; (80035dc <UART_SetConfig+0x2ec>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b03      	cmp	r3, #3
 8003384:	d816      	bhi.n	80033b4 <UART_SetConfig+0xc4>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <UART_SetConfig+0x9c>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033a9 	.word	0x080033a9
 8003394:	080033a3 	.word	0x080033a3
 8003398:	080033af 	.word	0x080033af
 800339c:	2301      	movs	r3, #1
 800339e:	76fb      	strb	r3, [r7, #27]
 80033a0:	e0e8      	b.n	8003574 <UART_SetConfig+0x284>
 80033a2:	2302      	movs	r3, #2
 80033a4:	76fb      	strb	r3, [r7, #27]
 80033a6:	e0e5      	b.n	8003574 <UART_SetConfig+0x284>
 80033a8:	2304      	movs	r3, #4
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e0e2      	b.n	8003574 <UART_SetConfig+0x284>
 80033ae:	2308      	movs	r3, #8
 80033b0:	76fb      	strb	r3, [r7, #27]
 80033b2:	e0df      	b.n	8003574 <UART_SetConfig+0x284>
 80033b4:	2310      	movs	r3, #16
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	bf00      	nop
 80033ba:	e0db      	b.n	8003574 <UART_SetConfig+0x284>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a87      	ldr	r2, [pc, #540]	; (80035e0 <UART_SetConfig+0x2f0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d134      	bne.n	8003430 <UART_SetConfig+0x140>
 80033c6:	4b85      	ldr	r3, [pc, #532]	; (80035dc <UART_SetConfig+0x2ec>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d829      	bhi.n	8003428 <UART_SetConfig+0x138>
 80033d4:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <UART_SetConfig+0xec>)
 80033d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033da:	bf00      	nop
 80033dc:	08003411 	.word	0x08003411
 80033e0:	08003429 	.word	0x08003429
 80033e4:	08003429 	.word	0x08003429
 80033e8:	08003429 	.word	0x08003429
 80033ec:	0800341d 	.word	0x0800341d
 80033f0:	08003429 	.word	0x08003429
 80033f4:	08003429 	.word	0x08003429
 80033f8:	08003429 	.word	0x08003429
 80033fc:	08003417 	.word	0x08003417
 8003400:	08003429 	.word	0x08003429
 8003404:	08003429 	.word	0x08003429
 8003408:	08003429 	.word	0x08003429
 800340c:	08003423 	.word	0x08003423
 8003410:	2300      	movs	r3, #0
 8003412:	76fb      	strb	r3, [r7, #27]
 8003414:	e0ae      	b.n	8003574 <UART_SetConfig+0x284>
 8003416:	2302      	movs	r3, #2
 8003418:	76fb      	strb	r3, [r7, #27]
 800341a:	e0ab      	b.n	8003574 <UART_SetConfig+0x284>
 800341c:	2304      	movs	r3, #4
 800341e:	76fb      	strb	r3, [r7, #27]
 8003420:	e0a8      	b.n	8003574 <UART_SetConfig+0x284>
 8003422:	2308      	movs	r3, #8
 8003424:	76fb      	strb	r3, [r7, #27]
 8003426:	e0a5      	b.n	8003574 <UART_SetConfig+0x284>
 8003428:	2310      	movs	r3, #16
 800342a:	76fb      	strb	r3, [r7, #27]
 800342c:	bf00      	nop
 800342e:	e0a1      	b.n	8003574 <UART_SetConfig+0x284>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6b      	ldr	r2, [pc, #428]	; (80035e4 <UART_SetConfig+0x2f4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d120      	bne.n	800347c <UART_SetConfig+0x18c>
 800343a:	4b68      	ldr	r3, [pc, #416]	; (80035dc <UART_SetConfig+0x2ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003444:	2b10      	cmp	r3, #16
 8003446:	d00f      	beq.n	8003468 <UART_SetConfig+0x178>
 8003448:	2b10      	cmp	r3, #16
 800344a:	d802      	bhi.n	8003452 <UART_SetConfig+0x162>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <UART_SetConfig+0x16c>
 8003450:	e010      	b.n	8003474 <UART_SetConfig+0x184>
 8003452:	2b20      	cmp	r3, #32
 8003454:	d005      	beq.n	8003462 <UART_SetConfig+0x172>
 8003456:	2b30      	cmp	r3, #48	; 0x30
 8003458:	d009      	beq.n	800346e <UART_SetConfig+0x17e>
 800345a:	e00b      	b.n	8003474 <UART_SetConfig+0x184>
 800345c:	2300      	movs	r3, #0
 800345e:	76fb      	strb	r3, [r7, #27]
 8003460:	e088      	b.n	8003574 <UART_SetConfig+0x284>
 8003462:	2302      	movs	r3, #2
 8003464:	76fb      	strb	r3, [r7, #27]
 8003466:	e085      	b.n	8003574 <UART_SetConfig+0x284>
 8003468:	2304      	movs	r3, #4
 800346a:	76fb      	strb	r3, [r7, #27]
 800346c:	e082      	b.n	8003574 <UART_SetConfig+0x284>
 800346e:	2308      	movs	r3, #8
 8003470:	76fb      	strb	r3, [r7, #27]
 8003472:	e07f      	b.n	8003574 <UART_SetConfig+0x284>
 8003474:	2310      	movs	r3, #16
 8003476:	76fb      	strb	r3, [r7, #27]
 8003478:	bf00      	nop
 800347a:	e07b      	b.n	8003574 <UART_SetConfig+0x284>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a59      	ldr	r2, [pc, #356]	; (80035e8 <UART_SetConfig+0x2f8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d120      	bne.n	80034c8 <UART_SetConfig+0x1d8>
 8003486:	4b55      	ldr	r3, [pc, #340]	; (80035dc <UART_SetConfig+0x2ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d00f      	beq.n	80034b4 <UART_SetConfig+0x1c4>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d802      	bhi.n	800349e <UART_SetConfig+0x1ae>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <UART_SetConfig+0x1b8>
 800349c:	e010      	b.n	80034c0 <UART_SetConfig+0x1d0>
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d005      	beq.n	80034ae <UART_SetConfig+0x1be>
 80034a2:	2bc0      	cmp	r3, #192	; 0xc0
 80034a4:	d009      	beq.n	80034ba <UART_SetConfig+0x1ca>
 80034a6:	e00b      	b.n	80034c0 <UART_SetConfig+0x1d0>
 80034a8:	2300      	movs	r3, #0
 80034aa:	76fb      	strb	r3, [r7, #27]
 80034ac:	e062      	b.n	8003574 <UART_SetConfig+0x284>
 80034ae:	2302      	movs	r3, #2
 80034b0:	76fb      	strb	r3, [r7, #27]
 80034b2:	e05f      	b.n	8003574 <UART_SetConfig+0x284>
 80034b4:	2304      	movs	r3, #4
 80034b6:	76fb      	strb	r3, [r7, #27]
 80034b8:	e05c      	b.n	8003574 <UART_SetConfig+0x284>
 80034ba:	2308      	movs	r3, #8
 80034bc:	76fb      	strb	r3, [r7, #27]
 80034be:	e059      	b.n	8003574 <UART_SetConfig+0x284>
 80034c0:	2310      	movs	r3, #16
 80034c2:	76fb      	strb	r3, [r7, #27]
 80034c4:	bf00      	nop
 80034c6:	e055      	b.n	8003574 <UART_SetConfig+0x284>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a47      	ldr	r2, [pc, #284]	; (80035ec <UART_SetConfig+0x2fc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d124      	bne.n	800351c <UART_SetConfig+0x22c>
 80034d2:	4b42      	ldr	r3, [pc, #264]	; (80035dc <UART_SetConfig+0x2ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e0:	d012      	beq.n	8003508 <UART_SetConfig+0x218>
 80034e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e6:	d802      	bhi.n	80034ee <UART_SetConfig+0x1fe>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <UART_SetConfig+0x20c>
 80034ec:	e012      	b.n	8003514 <UART_SetConfig+0x224>
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	d006      	beq.n	8003502 <UART_SetConfig+0x212>
 80034f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f8:	d009      	beq.n	800350e <UART_SetConfig+0x21e>
 80034fa:	e00b      	b.n	8003514 <UART_SetConfig+0x224>
 80034fc:	2300      	movs	r3, #0
 80034fe:	76fb      	strb	r3, [r7, #27]
 8003500:	e038      	b.n	8003574 <UART_SetConfig+0x284>
 8003502:	2302      	movs	r3, #2
 8003504:	76fb      	strb	r3, [r7, #27]
 8003506:	e035      	b.n	8003574 <UART_SetConfig+0x284>
 8003508:	2304      	movs	r3, #4
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e032      	b.n	8003574 <UART_SetConfig+0x284>
 800350e:	2308      	movs	r3, #8
 8003510:	76fb      	strb	r3, [r7, #27]
 8003512:	e02f      	b.n	8003574 <UART_SetConfig+0x284>
 8003514:	2310      	movs	r3, #16
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	bf00      	nop
 800351a:	e02b      	b.n	8003574 <UART_SetConfig+0x284>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a2c      	ldr	r2, [pc, #176]	; (80035d4 <UART_SetConfig+0x2e4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d124      	bne.n	8003570 <UART_SetConfig+0x280>
 8003526:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <UART_SetConfig+0x2ec>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003534:	d012      	beq.n	800355c <UART_SetConfig+0x26c>
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d802      	bhi.n	8003542 <UART_SetConfig+0x252>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <UART_SetConfig+0x260>
 8003540:	e012      	b.n	8003568 <UART_SetConfig+0x278>
 8003542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003546:	d006      	beq.n	8003556 <UART_SetConfig+0x266>
 8003548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800354c:	d009      	beq.n	8003562 <UART_SetConfig+0x272>
 800354e:	e00b      	b.n	8003568 <UART_SetConfig+0x278>
 8003550:	2300      	movs	r3, #0
 8003552:	76fb      	strb	r3, [r7, #27]
 8003554:	e00e      	b.n	8003574 <UART_SetConfig+0x284>
 8003556:	2302      	movs	r3, #2
 8003558:	76fb      	strb	r3, [r7, #27]
 800355a:	e00b      	b.n	8003574 <UART_SetConfig+0x284>
 800355c:	2304      	movs	r3, #4
 800355e:	76fb      	strb	r3, [r7, #27]
 8003560:	e008      	b.n	8003574 <UART_SetConfig+0x284>
 8003562:	2308      	movs	r3, #8
 8003564:	76fb      	strb	r3, [r7, #27]
 8003566:	e005      	b.n	8003574 <UART_SetConfig+0x284>
 8003568:	2310      	movs	r3, #16
 800356a:	76fb      	strb	r3, [r7, #27]
 800356c:	bf00      	nop
 800356e:	e001      	b.n	8003574 <UART_SetConfig+0x284>
 8003570:	2310      	movs	r3, #16
 8003572:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <UART_SetConfig+0x2e4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	f040 8087 	bne.w	800368e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003580:	7efb      	ldrb	r3, [r7, #27]
 8003582:	2b08      	cmp	r3, #8
 8003584:	d836      	bhi.n	80035f4 <UART_SetConfig+0x304>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <UART_SetConfig+0x29c>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035f5 	.word	0x080035f5
 8003594:	080035b9 	.word	0x080035b9
 8003598:	080035f5 	.word	0x080035f5
 800359c:	080035bf 	.word	0x080035bf
 80035a0:	080035f5 	.word	0x080035f5
 80035a4:	080035f5 	.word	0x080035f5
 80035a8:	080035f5 	.word	0x080035f5
 80035ac:	080035c7 	.word	0x080035c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fe82 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 80035b4:	6178      	str	r0, [r7, #20]
        break;
 80035b6:	e022      	b.n	80035fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <UART_SetConfig+0x300>)
 80035ba:	617b      	str	r3, [r7, #20]
        break;
 80035bc:	e01f      	b.n	80035fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe fde5 	bl	800218c <HAL_RCC_GetSysClockFreq>
 80035c2:	6178      	str	r0, [r7, #20]
        break;
 80035c4:	e01b      	b.n	80035fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ca:	617b      	str	r3, [r7, #20]
        break;
 80035cc:	e017      	b.n	80035fe <UART_SetConfig+0x30e>
 80035ce:	bf00      	nop
 80035d0:	efff69f3 	.word	0xefff69f3
 80035d4:	40008000 	.word	0x40008000
 80035d8:	40013800 	.word	0x40013800
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40004400 	.word	0x40004400
 80035e4:	40004800 	.word	0x40004800
 80035e8:	40004c00 	.word	0x40004c00
 80035ec:	40005000 	.word	0x40005000
 80035f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	76bb      	strb	r3, [r7, #26]
        break;
 80035fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80f1 	beq.w	80037e8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	429a      	cmp	r2, r3
 8003614:	d305      	bcc.n	8003622 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	429a      	cmp	r2, r3
 8003620:	d902      	bls.n	8003628 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	76bb      	strb	r3, [r7, #26]
 8003626:	e0df      	b.n	80037e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	4619      	mov	r1, r3
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	f04f 0400 	mov.w	r4, #0
 8003638:	0214      	lsls	r4, r2, #8
 800363a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800363e:	020b      	lsls	r3, r1, #8
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6852      	ldr	r2, [r2, #4]
 8003644:	0852      	lsrs	r2, r2, #1
 8003646:	4611      	mov	r1, r2
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	eb13 0b01 	adds.w	fp, r3, r1
 8003650:	eb44 0c02 	adc.w	ip, r4, r2
 8003654:	4658      	mov	r0, fp
 8003656:	4661      	mov	r1, ip
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f04f 0400 	mov.w	r4, #0
 8003660:	461a      	mov	r2, r3
 8003662:	4623      	mov	r3, r4
 8003664:	f7fc fe0c 	bl	8000280 <__aeabi_uldivmod>
 8003668:	4603      	mov	r3, r0
 800366a:	460c      	mov	r4, r1
 800366c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003674:	d308      	bcc.n	8003688 <UART_SetConfig+0x398>
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800367c:	d204      	bcs.n	8003688 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	e0af      	b.n	80037e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	76bb      	strb	r3, [r7, #26]
 800368c:	e0ac      	b.n	80037e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003696:	d15b      	bne.n	8003750 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003698:	7efb      	ldrb	r3, [r7, #27]
 800369a:	2b08      	cmp	r3, #8
 800369c:	d827      	bhi.n	80036ee <UART_SetConfig+0x3fe>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x3b4>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d9 	.word	0x080036d9
 80036b0:	080036ef 	.word	0x080036ef
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	080036ef 	.word	0x080036ef
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	080036e7 	.word	0x080036e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7fe fdf6 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 80036cc:	6178      	str	r0, [r7, #20]
        break;
 80036ce:	e013      	b.n	80036f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7fe fe08 	bl	80022e4 <HAL_RCC_GetPCLK2Freq>
 80036d4:	6178      	str	r0, [r7, #20]
        break;
 80036d6:	e00f      	b.n	80036f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d8:	4b49      	ldr	r3, [pc, #292]	; (8003800 <UART_SetConfig+0x510>)
 80036da:	617b      	str	r3, [r7, #20]
        break;
 80036dc:	e00c      	b.n	80036f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036de:	f7fe fd55 	bl	800218c <HAL_RCC_GetSysClockFreq>
 80036e2:	6178      	str	r0, [r7, #20]
        break;
 80036e4:	e008      	b.n	80036f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	617b      	str	r3, [r7, #20]
        break;
 80036ec:	e004      	b.n	80036f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	76bb      	strb	r3, [r7, #26]
        break;
 80036f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d074      	beq.n	80037e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	005a      	lsls	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	441a      	add	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	b29b      	uxth	r3, r3
 8003714:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b0f      	cmp	r3, #15
 800371a:	d916      	bls.n	800374a <UART_SetConfig+0x45a>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003722:	d212      	bcs.n	800374a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	b29b      	uxth	r3, r3
 8003728:	f023 030f 	bic.w	r3, r3, #15
 800372c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	b29a      	uxth	r2, r3
 800373a:	89fb      	ldrh	r3, [r7, #14]
 800373c:	4313      	orrs	r3, r2
 800373e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	89fa      	ldrh	r2, [r7, #14]
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	e04e      	b.n	80037e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	76bb      	strb	r3, [r7, #26]
 800374e:	e04b      	b.n	80037e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003750:	7efb      	ldrb	r3, [r7, #27]
 8003752:	2b08      	cmp	r3, #8
 8003754:	d827      	bhi.n	80037a6 <UART_SetConfig+0x4b6>
 8003756:	a201      	add	r2, pc, #4	; (adr r2, 800375c <UART_SetConfig+0x46c>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	08003781 	.word	0x08003781
 8003760:	08003789 	.word	0x08003789
 8003764:	08003791 	.word	0x08003791
 8003768:	080037a7 	.word	0x080037a7
 800376c:	08003797 	.word	0x08003797
 8003770:	080037a7 	.word	0x080037a7
 8003774:	080037a7 	.word	0x080037a7
 8003778:	080037a7 	.word	0x080037a7
 800377c:	0800379f 	.word	0x0800379f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003780:	f7fe fd9a 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 8003784:	6178      	str	r0, [r7, #20]
        break;
 8003786:	e013      	b.n	80037b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7fe fdac 	bl	80022e4 <HAL_RCC_GetPCLK2Freq>
 800378c:	6178      	str	r0, [r7, #20]
        break;
 800378e:	e00f      	b.n	80037b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <UART_SetConfig+0x510>)
 8003792:	617b      	str	r3, [r7, #20]
        break;
 8003794:	e00c      	b.n	80037b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003796:	f7fe fcf9 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800379a:	6178      	str	r0, [r7, #20]
        break;
 800379c:	e008      	b.n	80037b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a2:	617b      	str	r3, [r7, #20]
        break;
 80037a4:	e004      	b.n	80037b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	76bb      	strb	r3, [r7, #26]
        break;
 80037ae:	bf00      	nop
    }

    if (pclk != 0U)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d018      	beq.n	80037e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	085a      	lsrs	r2, r3, #1
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	441a      	add	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	d908      	bls.n	80037e4 <UART_SetConfig+0x4f4>
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d204      	bcs.n	80037e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e001      	b.n	80037e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80037f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003800:	00f42400 	.word	0x00f42400

08003804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01a      	beq.n	800391a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003902:	d10a      	bne.n	800391a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	605a      	str	r2, [r3, #4]
  }
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003956:	f7fd fbcf 	bl	80010f8 <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b08      	cmp	r3, #8
 8003968:	d10e      	bne.n	8003988 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800396a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f82a 	bl	80039d2 <UART_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e020      	b.n	80039ca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d10e      	bne.n	80039b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003996:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f814 	bl	80039d2 <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e00a      	b.n	80039ca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e2:	e05d      	b.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d059      	beq.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fd fb84 	bl	80010f8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d302      	bcc.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11b      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a10:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e042      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d02b      	beq.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a56:	d123      	bne.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a70:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e00f      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d092      	beq.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ade:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f7ff fbd8 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fbb5 	bl	80032c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b74:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7a:	2b22      	cmp	r3, #34	; 0x22
 8003b7c:	d13a      	bne.n	8003bf4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b84:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b86:	89bb      	ldrh	r3, [r7, #12]
 8003b88:	b2d9      	uxtb	r1, r3
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	400a      	ands	r2, r1
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d123      	bne.n	8003c08 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bce:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fc fcd5 	bl	800059c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bf2:	e009      	b.n	8003c08 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	8b1b      	ldrh	r3, [r3, #24]
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0208 	orr.w	r2, r2, #8
 8003c04:	b292      	uxth	r2, r2
 8003c06:	831a      	strh	r2, [r3, #24]
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c1e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c24:	2b22      	cmp	r3, #34	; 0x22
 8003c26:	d13a      	bne.n	8003c9e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c2e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c36:	89ba      	ldrh	r2, [r7, #12]
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d123      	bne.n	8003cb2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc fc80 	bl	800059c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c9c:	e009      	b.n	8003cb2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	8b1b      	ldrh	r3, [r3, #24]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0208 	orr.w	r2, r2, #8
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	831a      	strh	r2, [r3, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <__errno>:
 8003cd0:	4b01      	ldr	r3, [pc, #4]	; (8003cd8 <__errno+0x8>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20000040 	.word	0x20000040

08003cdc <__libc_init_array>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	4e0d      	ldr	r6, [pc, #52]	; (8003d14 <__libc_init_array+0x38>)
 8003ce0:	4c0d      	ldr	r4, [pc, #52]	; (8003d18 <__libc_init_array+0x3c>)
 8003ce2:	1ba4      	subs	r4, r4, r6
 8003ce4:	10a4      	asrs	r4, r4, #2
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	42a5      	cmp	r5, r4
 8003cea:	d109      	bne.n	8003d00 <__libc_init_array+0x24>
 8003cec:	4e0b      	ldr	r6, [pc, #44]	; (8003d1c <__libc_init_array+0x40>)
 8003cee:	4c0c      	ldr	r4, [pc, #48]	; (8003d20 <__libc_init_array+0x44>)
 8003cf0:	f000 fc40 	bl	8004574 <_init>
 8003cf4:	1ba4      	subs	r4, r4, r6
 8003cf6:	10a4      	asrs	r4, r4, #2
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	42a5      	cmp	r5, r4
 8003cfc:	d105      	bne.n	8003d0a <__libc_init_array+0x2e>
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
 8003d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d04:	4798      	blx	r3
 8003d06:	3501      	adds	r5, #1
 8003d08:	e7ee      	b.n	8003ce8 <__libc_init_array+0xc>
 8003d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d0e:	4798      	blx	r3
 8003d10:	3501      	adds	r5, #1
 8003d12:	e7f2      	b.n	8003cfa <__libc_init_array+0x1e>
 8003d14:	080047c8 	.word	0x080047c8
 8003d18:	080047c8 	.word	0x080047c8
 8003d1c:	080047c8 	.word	0x080047c8
 8003d20:	080047cc 	.word	0x080047cc

08003d24 <memset>:
 8003d24:	4402      	add	r2, r0
 8003d26:	4603      	mov	r3, r0
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d100      	bne.n	8003d2e <memset+0xa>
 8003d2c:	4770      	bx	lr
 8003d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d32:	e7f9      	b.n	8003d28 <memset+0x4>

08003d34 <siprintf>:
 8003d34:	b40e      	push	{r1, r2, r3}
 8003d36:	b500      	push	{lr}
 8003d38:	b09c      	sub	sp, #112	; 0x70
 8003d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d3c:	9002      	str	r0, [sp, #8]
 8003d3e:	9006      	str	r0, [sp, #24]
 8003d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d44:	4809      	ldr	r0, [pc, #36]	; (8003d6c <siprintf+0x38>)
 8003d46:	9107      	str	r1, [sp, #28]
 8003d48:	9104      	str	r1, [sp, #16]
 8003d4a:	4909      	ldr	r1, [pc, #36]	; (8003d70 <siprintf+0x3c>)
 8003d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d50:	9105      	str	r1, [sp, #20]
 8003d52:	6800      	ldr	r0, [r0, #0]
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	a902      	add	r1, sp, #8
 8003d58:	f000 f880 	bl	8003e5c <_svfiprintf_r>
 8003d5c:	9b02      	ldr	r3, [sp, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	b01c      	add	sp, #112	; 0x70
 8003d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d68:	b003      	add	sp, #12
 8003d6a:	4770      	bx	lr
 8003d6c:	20000040 	.word	0x20000040
 8003d70:	ffff0208 	.word	0xffff0208

08003d74 <strstr>:
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	7803      	ldrb	r3, [r0, #0]
 8003d78:	b17b      	cbz	r3, 8003d9a <strstr+0x26>
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	7823      	ldrb	r3, [r4, #0]
 8003d7e:	4620      	mov	r0, r4
 8003d80:	1c66      	adds	r6, r4, #1
 8003d82:	b17b      	cbz	r3, 8003da4 <strstr+0x30>
 8003d84:	1e4a      	subs	r2, r1, #1
 8003d86:	1e63      	subs	r3, r4, #1
 8003d88:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003d8c:	b14d      	cbz	r5, 8003da2 <strstr+0x2e>
 8003d8e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003d92:	42af      	cmp	r7, r5
 8003d94:	4634      	mov	r4, r6
 8003d96:	d0f7      	beq.n	8003d88 <strstr+0x14>
 8003d98:	e7f0      	b.n	8003d7c <strstr+0x8>
 8003d9a:	780b      	ldrb	r3, [r1, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf18      	it	ne
 8003da0:	2000      	movne	r0, #0
 8003da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da4:	4618      	mov	r0, r3
 8003da6:	e7fc      	b.n	8003da2 <strstr+0x2e>

08003da8 <__ssputs_r>:
 8003da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	688e      	ldr	r6, [r1, #8]
 8003dae:	429e      	cmp	r6, r3
 8003db0:	4682      	mov	sl, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	4690      	mov	r8, r2
 8003db6:	4699      	mov	r9, r3
 8003db8:	d837      	bhi.n	8003e2a <__ssputs_r+0x82>
 8003dba:	898a      	ldrh	r2, [r1, #12]
 8003dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dc0:	d031      	beq.n	8003e26 <__ssputs_r+0x7e>
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	6909      	ldr	r1, [r1, #16]
 8003dc6:	1a6f      	subs	r7, r5, r1
 8003dc8:	6965      	ldr	r5, [r4, #20]
 8003dca:	2302      	movs	r3, #2
 8003dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8003dd4:	f109 0301 	add.w	r3, r9, #1
 8003dd8:	443b      	add	r3, r7
 8003dda:	429d      	cmp	r5, r3
 8003ddc:	bf38      	it	cc
 8003dde:	461d      	movcc	r5, r3
 8003de0:	0553      	lsls	r3, r2, #21
 8003de2:	d530      	bpl.n	8003e46 <__ssputs_r+0x9e>
 8003de4:	4629      	mov	r1, r5
 8003de6:	f000 fb2b 	bl	8004440 <_malloc_r>
 8003dea:	4606      	mov	r6, r0
 8003dec:	b950      	cbnz	r0, 8003e04 <__ssputs_r+0x5c>
 8003dee:	230c      	movs	r3, #12
 8003df0:	f8ca 3000 	str.w	r3, [sl]
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dfa:	81a3      	strh	r3, [r4, #12]
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e04:	463a      	mov	r2, r7
 8003e06:	6921      	ldr	r1, [r4, #16]
 8003e08:	f000 faa8 	bl	800435c <memcpy>
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	6126      	str	r6, [r4, #16]
 8003e1a:	6165      	str	r5, [r4, #20]
 8003e1c:	443e      	add	r6, r7
 8003e1e:	1bed      	subs	r5, r5, r7
 8003e20:	6026      	str	r6, [r4, #0]
 8003e22:	60a5      	str	r5, [r4, #8]
 8003e24:	464e      	mov	r6, r9
 8003e26:	454e      	cmp	r6, r9
 8003e28:	d900      	bls.n	8003e2c <__ssputs_r+0x84>
 8003e2a:	464e      	mov	r6, r9
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	4641      	mov	r1, r8
 8003e30:	6820      	ldr	r0, [r4, #0]
 8003e32:	f000 fa9e 	bl	8004372 <memmove>
 8003e36:	68a3      	ldr	r3, [r4, #8]
 8003e38:	1b9b      	subs	r3, r3, r6
 8003e3a:	60a3      	str	r3, [r4, #8]
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	441e      	add	r6, r3
 8003e40:	6026      	str	r6, [r4, #0]
 8003e42:	2000      	movs	r0, #0
 8003e44:	e7dc      	b.n	8003e00 <__ssputs_r+0x58>
 8003e46:	462a      	mov	r2, r5
 8003e48:	f000 fb54 	bl	80044f4 <_realloc_r>
 8003e4c:	4606      	mov	r6, r0
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1e2      	bne.n	8003e18 <__ssputs_r+0x70>
 8003e52:	6921      	ldr	r1, [r4, #16]
 8003e54:	4650      	mov	r0, sl
 8003e56:	f000 faa5 	bl	80043a4 <_free_r>
 8003e5a:	e7c8      	b.n	8003dee <__ssputs_r+0x46>

08003e5c <_svfiprintf_r>:
 8003e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e60:	461d      	mov	r5, r3
 8003e62:	898b      	ldrh	r3, [r1, #12]
 8003e64:	061f      	lsls	r7, r3, #24
 8003e66:	b09d      	sub	sp, #116	; 0x74
 8003e68:	4680      	mov	r8, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	d50f      	bpl.n	8003e90 <_svfiprintf_r+0x34>
 8003e70:	690b      	ldr	r3, [r1, #16]
 8003e72:	b96b      	cbnz	r3, 8003e90 <_svfiprintf_r+0x34>
 8003e74:	2140      	movs	r1, #64	; 0x40
 8003e76:	f000 fae3 	bl	8004440 <_malloc_r>
 8003e7a:	6020      	str	r0, [r4, #0]
 8003e7c:	6120      	str	r0, [r4, #16]
 8003e7e:	b928      	cbnz	r0, 8003e8c <_svfiprintf_r+0x30>
 8003e80:	230c      	movs	r3, #12
 8003e82:	f8c8 3000 	str.w	r3, [r8]
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8a:	e0c8      	b.n	800401e <_svfiprintf_r+0x1c2>
 8003e8c:	2340      	movs	r3, #64	; 0x40
 8003e8e:	6163      	str	r3, [r4, #20]
 8003e90:	2300      	movs	r3, #0
 8003e92:	9309      	str	r3, [sp, #36]	; 0x24
 8003e94:	2320      	movs	r3, #32
 8003e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e9a:	2330      	movs	r3, #48	; 0x30
 8003e9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ea0:	9503      	str	r5, [sp, #12]
 8003ea2:	f04f 0b01 	mov.w	fp, #1
 8003ea6:	4637      	mov	r7, r6
 8003ea8:	463d      	mov	r5, r7
 8003eaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003eae:	b10b      	cbz	r3, 8003eb4 <_svfiprintf_r+0x58>
 8003eb0:	2b25      	cmp	r3, #37	; 0x25
 8003eb2:	d13e      	bne.n	8003f32 <_svfiprintf_r+0xd6>
 8003eb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8003eb8:	d00b      	beq.n	8003ed2 <_svfiprintf_r+0x76>
 8003eba:	4653      	mov	r3, sl
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	f7ff ff71 	bl	8003da8 <__ssputs_r>
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	f000 80a4 	beq.w	8004014 <_svfiprintf_r+0x1b8>
 8003ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ece:	4453      	add	r3, sl
 8003ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed2:	783b      	ldrb	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 809d 	beq.w	8004014 <_svfiprintf_r+0x1b8>
 8003eda:	2300      	movs	r3, #0
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ee4:	9304      	str	r3, [sp, #16]
 8003ee6:	9307      	str	r3, [sp, #28]
 8003ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eec:	931a      	str	r3, [sp, #104]	; 0x68
 8003eee:	462f      	mov	r7, r5
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003ef6:	4850      	ldr	r0, [pc, #320]	; (8004038 <_svfiprintf_r+0x1dc>)
 8003ef8:	f7fc f972 	bl	80001e0 <memchr>
 8003efc:	9b04      	ldr	r3, [sp, #16]
 8003efe:	b9d0      	cbnz	r0, 8003f36 <_svfiprintf_r+0xda>
 8003f00:	06d9      	lsls	r1, r3, #27
 8003f02:	bf44      	itt	mi
 8003f04:	2220      	movmi	r2, #32
 8003f06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f0a:	071a      	lsls	r2, r3, #28
 8003f0c:	bf44      	itt	mi
 8003f0e:	222b      	movmi	r2, #43	; 0x2b
 8003f10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f14:	782a      	ldrb	r2, [r5, #0]
 8003f16:	2a2a      	cmp	r2, #42	; 0x2a
 8003f18:	d015      	beq.n	8003f46 <_svfiprintf_r+0xea>
 8003f1a:	9a07      	ldr	r2, [sp, #28]
 8003f1c:	462f      	mov	r7, r5
 8003f1e:	2000      	movs	r0, #0
 8003f20:	250a      	movs	r5, #10
 8003f22:	4639      	mov	r1, r7
 8003f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f28:	3b30      	subs	r3, #48	; 0x30
 8003f2a:	2b09      	cmp	r3, #9
 8003f2c:	d94d      	bls.n	8003fca <_svfiprintf_r+0x16e>
 8003f2e:	b1b8      	cbz	r0, 8003f60 <_svfiprintf_r+0x104>
 8003f30:	e00f      	b.n	8003f52 <_svfiprintf_r+0xf6>
 8003f32:	462f      	mov	r7, r5
 8003f34:	e7b8      	b.n	8003ea8 <_svfiprintf_r+0x4c>
 8003f36:	4a40      	ldr	r2, [pc, #256]	; (8004038 <_svfiprintf_r+0x1dc>)
 8003f38:	1a80      	subs	r0, r0, r2
 8003f3a:	fa0b f000 	lsl.w	r0, fp, r0
 8003f3e:	4318      	orrs	r0, r3
 8003f40:	9004      	str	r0, [sp, #16]
 8003f42:	463d      	mov	r5, r7
 8003f44:	e7d3      	b.n	8003eee <_svfiprintf_r+0x92>
 8003f46:	9a03      	ldr	r2, [sp, #12]
 8003f48:	1d11      	adds	r1, r2, #4
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	9103      	str	r1, [sp, #12]
 8003f4e:	2a00      	cmp	r2, #0
 8003f50:	db01      	blt.n	8003f56 <_svfiprintf_r+0xfa>
 8003f52:	9207      	str	r2, [sp, #28]
 8003f54:	e004      	b.n	8003f60 <_svfiprintf_r+0x104>
 8003f56:	4252      	negs	r2, r2
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	9207      	str	r2, [sp, #28]
 8003f5e:	9304      	str	r3, [sp, #16]
 8003f60:	783b      	ldrb	r3, [r7, #0]
 8003f62:	2b2e      	cmp	r3, #46	; 0x2e
 8003f64:	d10c      	bne.n	8003f80 <_svfiprintf_r+0x124>
 8003f66:	787b      	ldrb	r3, [r7, #1]
 8003f68:	2b2a      	cmp	r3, #42	; 0x2a
 8003f6a:	d133      	bne.n	8003fd4 <_svfiprintf_r+0x178>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	1d1a      	adds	r2, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	9203      	str	r2, [sp, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bfb8      	it	lt
 8003f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f7c:	3702      	adds	r7, #2
 8003f7e:	9305      	str	r3, [sp, #20]
 8003f80:	4d2e      	ldr	r5, [pc, #184]	; (800403c <_svfiprintf_r+0x1e0>)
 8003f82:	7839      	ldrb	r1, [r7, #0]
 8003f84:	2203      	movs	r2, #3
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7fc f92a 	bl	80001e0 <memchr>
 8003f8c:	b138      	cbz	r0, 8003f9e <_svfiprintf_r+0x142>
 8003f8e:	2340      	movs	r3, #64	; 0x40
 8003f90:	1b40      	subs	r0, r0, r5
 8003f92:	fa03 f000 	lsl.w	r0, r3, r0
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	4303      	orrs	r3, r0
 8003f9a:	3701      	adds	r7, #1
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	7839      	ldrb	r1, [r7, #0]
 8003fa0:	4827      	ldr	r0, [pc, #156]	; (8004040 <_svfiprintf_r+0x1e4>)
 8003fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa6:	2206      	movs	r2, #6
 8003fa8:	1c7e      	adds	r6, r7, #1
 8003faa:	f7fc f919 	bl	80001e0 <memchr>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d038      	beq.n	8004024 <_svfiprintf_r+0x1c8>
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <_svfiprintf_r+0x1e8>)
 8003fb4:	bb13      	cbnz	r3, 8003ffc <_svfiprintf_r+0x1a0>
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	3307      	adds	r3, #7
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc4:	444b      	add	r3, r9
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	e76d      	b.n	8003ea6 <_svfiprintf_r+0x4a>
 8003fca:	fb05 3202 	mla	r2, r5, r2, r3
 8003fce:	2001      	movs	r0, #1
 8003fd0:	460f      	mov	r7, r1
 8003fd2:	e7a6      	b.n	8003f22 <_svfiprintf_r+0xc6>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	3701      	adds	r7, #1
 8003fd8:	9305      	str	r3, [sp, #20]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	250a      	movs	r5, #10
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe4:	3a30      	subs	r2, #48	; 0x30
 8003fe6:	2a09      	cmp	r2, #9
 8003fe8:	d903      	bls.n	8003ff2 <_svfiprintf_r+0x196>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0c8      	beq.n	8003f80 <_svfiprintf_r+0x124>
 8003fee:	9105      	str	r1, [sp, #20]
 8003ff0:	e7c6      	b.n	8003f80 <_svfiprintf_r+0x124>
 8003ff2:	fb05 2101 	mla	r1, r5, r1, r2
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	4607      	mov	r7, r0
 8003ffa:	e7f0      	b.n	8003fde <_svfiprintf_r+0x182>
 8003ffc:	ab03      	add	r3, sp, #12
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	4622      	mov	r2, r4
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <_svfiprintf_r+0x1ec>)
 8004004:	a904      	add	r1, sp, #16
 8004006:	4640      	mov	r0, r8
 8004008:	f3af 8000 	nop.w
 800400c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004010:	4681      	mov	r9, r0
 8004012:	d1d6      	bne.n	8003fc2 <_svfiprintf_r+0x166>
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	065b      	lsls	r3, r3, #25
 8004018:	f53f af35 	bmi.w	8003e86 <_svfiprintf_r+0x2a>
 800401c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800401e:	b01d      	add	sp, #116	; 0x74
 8004020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004024:	ab03      	add	r3, sp, #12
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4622      	mov	r2, r4
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <_svfiprintf_r+0x1ec>)
 800402c:	a904      	add	r1, sp, #16
 800402e:	4640      	mov	r0, r8
 8004030:	f000 f882 	bl	8004138 <_printf_i>
 8004034:	e7ea      	b.n	800400c <_svfiprintf_r+0x1b0>
 8004036:	bf00      	nop
 8004038:	0800478c 	.word	0x0800478c
 800403c:	08004792 	.word	0x08004792
 8004040:	08004796 	.word	0x08004796
 8004044:	00000000 	.word	0x00000000
 8004048:	08003da9 	.word	0x08003da9

0800404c <_printf_common>:
 800404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	4691      	mov	r9, r2
 8004052:	461f      	mov	r7, r3
 8004054:	688a      	ldr	r2, [r1, #8]
 8004056:	690b      	ldr	r3, [r1, #16]
 8004058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800405c:	4293      	cmp	r3, r2
 800405e:	bfb8      	it	lt
 8004060:	4613      	movlt	r3, r2
 8004062:	f8c9 3000 	str.w	r3, [r9]
 8004066:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800406a:	4606      	mov	r6, r0
 800406c:	460c      	mov	r4, r1
 800406e:	b112      	cbz	r2, 8004076 <_printf_common+0x2a>
 8004070:	3301      	adds	r3, #1
 8004072:	f8c9 3000 	str.w	r3, [r9]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	0699      	lsls	r1, r3, #26
 800407a:	bf42      	ittt	mi
 800407c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004080:	3302      	addmi	r3, #2
 8004082:	f8c9 3000 	strmi.w	r3, [r9]
 8004086:	6825      	ldr	r5, [r4, #0]
 8004088:	f015 0506 	ands.w	r5, r5, #6
 800408c:	d107      	bne.n	800409e <_printf_common+0x52>
 800408e:	f104 0a19 	add.w	sl, r4, #25
 8004092:	68e3      	ldr	r3, [r4, #12]
 8004094:	f8d9 2000 	ldr.w	r2, [r9]
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	42ab      	cmp	r3, r5
 800409c:	dc28      	bgt.n	80040f0 <_printf_common+0xa4>
 800409e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	3300      	adds	r3, #0
 80040a6:	bf18      	it	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	0692      	lsls	r2, r2, #26
 80040ac:	d42d      	bmi.n	800410a <_printf_common+0xbe>
 80040ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040b2:	4639      	mov	r1, r7
 80040b4:	4630      	mov	r0, r6
 80040b6:	47c0      	blx	r8
 80040b8:	3001      	adds	r0, #1
 80040ba:	d020      	beq.n	80040fe <_printf_common+0xb2>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	68e5      	ldr	r5, [r4, #12]
 80040c0:	f8d9 2000 	ldr.w	r2, [r9]
 80040c4:	f003 0306 	and.w	r3, r3, #6
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	bf08      	it	eq
 80040cc:	1aad      	subeq	r5, r5, r2
 80040ce:	68a3      	ldr	r3, [r4, #8]
 80040d0:	6922      	ldr	r2, [r4, #16]
 80040d2:	bf0c      	ite	eq
 80040d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040d8:	2500      	movne	r5, #0
 80040da:	4293      	cmp	r3, r2
 80040dc:	bfc4      	itt	gt
 80040de:	1a9b      	subgt	r3, r3, r2
 80040e0:	18ed      	addgt	r5, r5, r3
 80040e2:	f04f 0900 	mov.w	r9, #0
 80040e6:	341a      	adds	r4, #26
 80040e8:	454d      	cmp	r5, r9
 80040ea:	d11a      	bne.n	8004122 <_printf_common+0xd6>
 80040ec:	2000      	movs	r0, #0
 80040ee:	e008      	b.n	8004102 <_printf_common+0xb6>
 80040f0:	2301      	movs	r3, #1
 80040f2:	4652      	mov	r2, sl
 80040f4:	4639      	mov	r1, r7
 80040f6:	4630      	mov	r0, r6
 80040f8:	47c0      	blx	r8
 80040fa:	3001      	adds	r0, #1
 80040fc:	d103      	bne.n	8004106 <_printf_common+0xba>
 80040fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004106:	3501      	adds	r5, #1
 8004108:	e7c3      	b.n	8004092 <_printf_common+0x46>
 800410a:	18e1      	adds	r1, r4, r3
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	2030      	movs	r0, #48	; 0x30
 8004110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004114:	4422      	add	r2, r4
 8004116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800411a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800411e:	3302      	adds	r3, #2
 8004120:	e7c5      	b.n	80040ae <_printf_common+0x62>
 8004122:	2301      	movs	r3, #1
 8004124:	4622      	mov	r2, r4
 8004126:	4639      	mov	r1, r7
 8004128:	4630      	mov	r0, r6
 800412a:	47c0      	blx	r8
 800412c:	3001      	adds	r0, #1
 800412e:	d0e6      	beq.n	80040fe <_printf_common+0xb2>
 8004130:	f109 0901 	add.w	r9, r9, #1
 8004134:	e7d8      	b.n	80040e8 <_printf_common+0x9c>
	...

08004138 <_printf_i>:
 8004138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800413c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004140:	460c      	mov	r4, r1
 8004142:	7e09      	ldrb	r1, [r1, #24]
 8004144:	b085      	sub	sp, #20
 8004146:	296e      	cmp	r1, #110	; 0x6e
 8004148:	4617      	mov	r7, r2
 800414a:	4606      	mov	r6, r0
 800414c:	4698      	mov	r8, r3
 800414e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004150:	f000 80b3 	beq.w	80042ba <_printf_i+0x182>
 8004154:	d822      	bhi.n	800419c <_printf_i+0x64>
 8004156:	2963      	cmp	r1, #99	; 0x63
 8004158:	d036      	beq.n	80041c8 <_printf_i+0x90>
 800415a:	d80a      	bhi.n	8004172 <_printf_i+0x3a>
 800415c:	2900      	cmp	r1, #0
 800415e:	f000 80b9 	beq.w	80042d4 <_printf_i+0x19c>
 8004162:	2958      	cmp	r1, #88	; 0x58
 8004164:	f000 8083 	beq.w	800426e <_printf_i+0x136>
 8004168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800416c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004170:	e032      	b.n	80041d8 <_printf_i+0xa0>
 8004172:	2964      	cmp	r1, #100	; 0x64
 8004174:	d001      	beq.n	800417a <_printf_i+0x42>
 8004176:	2969      	cmp	r1, #105	; 0x69
 8004178:	d1f6      	bne.n	8004168 <_printf_i+0x30>
 800417a:	6820      	ldr	r0, [r4, #0]
 800417c:	6813      	ldr	r3, [r2, #0]
 800417e:	0605      	lsls	r5, r0, #24
 8004180:	f103 0104 	add.w	r1, r3, #4
 8004184:	d52a      	bpl.n	80041dc <_printf_i+0xa4>
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	da03      	bge.n	8004196 <_printf_i+0x5e>
 800418e:	222d      	movs	r2, #45	; 0x2d
 8004190:	425b      	negs	r3, r3
 8004192:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004196:	486f      	ldr	r0, [pc, #444]	; (8004354 <_printf_i+0x21c>)
 8004198:	220a      	movs	r2, #10
 800419a:	e039      	b.n	8004210 <_printf_i+0xd8>
 800419c:	2973      	cmp	r1, #115	; 0x73
 800419e:	f000 809d 	beq.w	80042dc <_printf_i+0x1a4>
 80041a2:	d808      	bhi.n	80041b6 <_printf_i+0x7e>
 80041a4:	296f      	cmp	r1, #111	; 0x6f
 80041a6:	d020      	beq.n	80041ea <_printf_i+0xb2>
 80041a8:	2970      	cmp	r1, #112	; 0x70
 80041aa:	d1dd      	bne.n	8004168 <_printf_i+0x30>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f043 0320 	orr.w	r3, r3, #32
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	e003      	b.n	80041be <_printf_i+0x86>
 80041b6:	2975      	cmp	r1, #117	; 0x75
 80041b8:	d017      	beq.n	80041ea <_printf_i+0xb2>
 80041ba:	2978      	cmp	r1, #120	; 0x78
 80041bc:	d1d4      	bne.n	8004168 <_printf_i+0x30>
 80041be:	2378      	movs	r3, #120	; 0x78
 80041c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041c4:	4864      	ldr	r0, [pc, #400]	; (8004358 <_printf_i+0x220>)
 80041c6:	e055      	b.n	8004274 <_printf_i+0x13c>
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	1d19      	adds	r1, r3, #4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6011      	str	r1, [r2, #0]
 80041d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041d8:	2301      	movs	r3, #1
 80041da:	e08c      	b.n	80042f6 <_printf_i+0x1be>
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6011      	str	r1, [r2, #0]
 80041e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041e4:	bf18      	it	ne
 80041e6:	b21b      	sxthne	r3, r3
 80041e8:	e7cf      	b.n	800418a <_printf_i+0x52>
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	6825      	ldr	r5, [r4, #0]
 80041ee:	1d18      	adds	r0, r3, #4
 80041f0:	6010      	str	r0, [r2, #0]
 80041f2:	0628      	lsls	r0, r5, #24
 80041f4:	d501      	bpl.n	80041fa <_printf_i+0xc2>
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	e002      	b.n	8004200 <_printf_i+0xc8>
 80041fa:	0668      	lsls	r0, r5, #25
 80041fc:	d5fb      	bpl.n	80041f6 <_printf_i+0xbe>
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	4854      	ldr	r0, [pc, #336]	; (8004354 <_printf_i+0x21c>)
 8004202:	296f      	cmp	r1, #111	; 0x6f
 8004204:	bf14      	ite	ne
 8004206:	220a      	movne	r2, #10
 8004208:	2208      	moveq	r2, #8
 800420a:	2100      	movs	r1, #0
 800420c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004210:	6865      	ldr	r5, [r4, #4]
 8004212:	60a5      	str	r5, [r4, #8]
 8004214:	2d00      	cmp	r5, #0
 8004216:	f2c0 8095 	blt.w	8004344 <_printf_i+0x20c>
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	f021 0104 	bic.w	r1, r1, #4
 8004220:	6021      	str	r1, [r4, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d13d      	bne.n	80042a2 <_printf_i+0x16a>
 8004226:	2d00      	cmp	r5, #0
 8004228:	f040 808e 	bne.w	8004348 <_printf_i+0x210>
 800422c:	4665      	mov	r5, ip
 800422e:	2a08      	cmp	r2, #8
 8004230:	d10b      	bne.n	800424a <_printf_i+0x112>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	07db      	lsls	r3, r3, #31
 8004236:	d508      	bpl.n	800424a <_printf_i+0x112>
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	6862      	ldr	r2, [r4, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	bfde      	ittt	le
 8004240:	2330      	movle	r3, #48	; 0x30
 8004242:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004246:	f105 35ff 	addle.w	r5, r5, #4294967295
 800424a:	ebac 0305 	sub.w	r3, ip, r5
 800424e:	6123      	str	r3, [r4, #16]
 8004250:	f8cd 8000 	str.w	r8, [sp]
 8004254:	463b      	mov	r3, r7
 8004256:	aa03      	add	r2, sp, #12
 8004258:	4621      	mov	r1, r4
 800425a:	4630      	mov	r0, r6
 800425c:	f7ff fef6 	bl	800404c <_printf_common>
 8004260:	3001      	adds	r0, #1
 8004262:	d14d      	bne.n	8004300 <_printf_i+0x1c8>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	b005      	add	sp, #20
 800426a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800426e:	4839      	ldr	r0, [pc, #228]	; (8004354 <_printf_i+0x21c>)
 8004270:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004274:	6813      	ldr	r3, [r2, #0]
 8004276:	6821      	ldr	r1, [r4, #0]
 8004278:	1d1d      	adds	r5, r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6015      	str	r5, [r2, #0]
 800427e:	060a      	lsls	r2, r1, #24
 8004280:	d50b      	bpl.n	800429a <_printf_i+0x162>
 8004282:	07ca      	lsls	r2, r1, #31
 8004284:	bf44      	itt	mi
 8004286:	f041 0120 	orrmi.w	r1, r1, #32
 800428a:	6021      	strmi	r1, [r4, #0]
 800428c:	b91b      	cbnz	r3, 8004296 <_printf_i+0x15e>
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	f022 0220 	bic.w	r2, r2, #32
 8004294:	6022      	str	r2, [r4, #0]
 8004296:	2210      	movs	r2, #16
 8004298:	e7b7      	b.n	800420a <_printf_i+0xd2>
 800429a:	064d      	lsls	r5, r1, #25
 800429c:	bf48      	it	mi
 800429e:	b29b      	uxthmi	r3, r3
 80042a0:	e7ef      	b.n	8004282 <_printf_i+0x14a>
 80042a2:	4665      	mov	r5, ip
 80042a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042a8:	fb02 3311 	mls	r3, r2, r1, r3
 80042ac:	5cc3      	ldrb	r3, [r0, r3]
 80042ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042b2:	460b      	mov	r3, r1
 80042b4:	2900      	cmp	r1, #0
 80042b6:	d1f5      	bne.n	80042a4 <_printf_i+0x16c>
 80042b8:	e7b9      	b.n	800422e <_printf_i+0xf6>
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	6825      	ldr	r5, [r4, #0]
 80042be:	6961      	ldr	r1, [r4, #20]
 80042c0:	1d18      	adds	r0, r3, #4
 80042c2:	6010      	str	r0, [r2, #0]
 80042c4:	0628      	lsls	r0, r5, #24
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	d501      	bpl.n	80042ce <_printf_i+0x196>
 80042ca:	6019      	str	r1, [r3, #0]
 80042cc:	e002      	b.n	80042d4 <_printf_i+0x19c>
 80042ce:	066a      	lsls	r2, r5, #25
 80042d0:	d5fb      	bpl.n	80042ca <_printf_i+0x192>
 80042d2:	8019      	strh	r1, [r3, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	6123      	str	r3, [r4, #16]
 80042d8:	4665      	mov	r5, ip
 80042da:	e7b9      	b.n	8004250 <_printf_i+0x118>
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	1d19      	adds	r1, r3, #4
 80042e0:	6011      	str	r1, [r2, #0]
 80042e2:	681d      	ldr	r5, [r3, #0]
 80042e4:	6862      	ldr	r2, [r4, #4]
 80042e6:	2100      	movs	r1, #0
 80042e8:	4628      	mov	r0, r5
 80042ea:	f7fb ff79 	bl	80001e0 <memchr>
 80042ee:	b108      	cbz	r0, 80042f4 <_printf_i+0x1bc>
 80042f0:	1b40      	subs	r0, r0, r5
 80042f2:	6060      	str	r0, [r4, #4]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2300      	movs	r3, #0
 80042fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fe:	e7a7      	b.n	8004250 <_printf_i+0x118>
 8004300:	6923      	ldr	r3, [r4, #16]
 8004302:	462a      	mov	r2, r5
 8004304:	4639      	mov	r1, r7
 8004306:	4630      	mov	r0, r6
 8004308:	47c0      	blx	r8
 800430a:	3001      	adds	r0, #1
 800430c:	d0aa      	beq.n	8004264 <_printf_i+0x12c>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	079b      	lsls	r3, r3, #30
 8004312:	d413      	bmi.n	800433c <_printf_i+0x204>
 8004314:	68e0      	ldr	r0, [r4, #12]
 8004316:	9b03      	ldr	r3, [sp, #12]
 8004318:	4298      	cmp	r0, r3
 800431a:	bfb8      	it	lt
 800431c:	4618      	movlt	r0, r3
 800431e:	e7a3      	b.n	8004268 <_printf_i+0x130>
 8004320:	2301      	movs	r3, #1
 8004322:	464a      	mov	r2, r9
 8004324:	4639      	mov	r1, r7
 8004326:	4630      	mov	r0, r6
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d09a      	beq.n	8004264 <_printf_i+0x12c>
 800432e:	3501      	adds	r5, #1
 8004330:	68e3      	ldr	r3, [r4, #12]
 8004332:	9a03      	ldr	r2, [sp, #12]
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	42ab      	cmp	r3, r5
 8004338:	dcf2      	bgt.n	8004320 <_printf_i+0x1e8>
 800433a:	e7eb      	b.n	8004314 <_printf_i+0x1dc>
 800433c:	2500      	movs	r5, #0
 800433e:	f104 0919 	add.w	r9, r4, #25
 8004342:	e7f5      	b.n	8004330 <_printf_i+0x1f8>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ac      	bne.n	80042a2 <_printf_i+0x16a>
 8004348:	7803      	ldrb	r3, [r0, #0]
 800434a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800434e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004352:	e76c      	b.n	800422e <_printf_i+0xf6>
 8004354:	0800479d 	.word	0x0800479d
 8004358:	080047ae 	.word	0x080047ae

0800435c <memcpy>:
 800435c:	b510      	push	{r4, lr}
 800435e:	1e43      	subs	r3, r0, #1
 8004360:	440a      	add	r2, r1
 8004362:	4291      	cmp	r1, r2
 8004364:	d100      	bne.n	8004368 <memcpy+0xc>
 8004366:	bd10      	pop	{r4, pc}
 8004368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800436c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004370:	e7f7      	b.n	8004362 <memcpy+0x6>

08004372 <memmove>:
 8004372:	4288      	cmp	r0, r1
 8004374:	b510      	push	{r4, lr}
 8004376:	eb01 0302 	add.w	r3, r1, r2
 800437a:	d807      	bhi.n	800438c <memmove+0x1a>
 800437c:	1e42      	subs	r2, r0, #1
 800437e:	4299      	cmp	r1, r3
 8004380:	d00a      	beq.n	8004398 <memmove+0x26>
 8004382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004386:	f802 4f01 	strb.w	r4, [r2, #1]!
 800438a:	e7f8      	b.n	800437e <memmove+0xc>
 800438c:	4283      	cmp	r3, r0
 800438e:	d9f5      	bls.n	800437c <memmove+0xa>
 8004390:	1881      	adds	r1, r0, r2
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	42d3      	cmn	r3, r2
 8004396:	d100      	bne.n	800439a <memmove+0x28>
 8004398:	bd10      	pop	{r4, pc}
 800439a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800439e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80043a2:	e7f7      	b.n	8004394 <memmove+0x22>

080043a4 <_free_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d045      	beq.n	8004438 <_free_r+0x94>
 80043ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b0:	1f0c      	subs	r4, r1, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfb8      	it	lt
 80043b6:	18e4      	addlt	r4, r4, r3
 80043b8:	f000 f8d2 	bl	8004560 <__malloc_lock>
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <_free_r+0x98>)
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	4610      	mov	r0, r2
 80043c2:	b933      	cbnz	r3, 80043d2 <_free_r+0x2e>
 80043c4:	6063      	str	r3, [r4, #4]
 80043c6:	6014      	str	r4, [r2, #0]
 80043c8:	4628      	mov	r0, r5
 80043ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ce:	f000 b8c8 	b.w	8004562 <__malloc_unlock>
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	d90c      	bls.n	80043f0 <_free_r+0x4c>
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	1862      	adds	r2, r4, r1
 80043da:	4293      	cmp	r3, r2
 80043dc:	bf04      	itt	eq
 80043de:	681a      	ldreq	r2, [r3, #0]
 80043e0:	685b      	ldreq	r3, [r3, #4]
 80043e2:	6063      	str	r3, [r4, #4]
 80043e4:	bf04      	itt	eq
 80043e6:	1852      	addeq	r2, r2, r1
 80043e8:	6022      	streq	r2, [r4, #0]
 80043ea:	6004      	str	r4, [r0, #0]
 80043ec:	e7ec      	b.n	80043c8 <_free_r+0x24>
 80043ee:	4613      	mov	r3, r2
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	b10a      	cbz	r2, 80043f8 <_free_r+0x54>
 80043f4:	42a2      	cmp	r2, r4
 80043f6:	d9fa      	bls.n	80043ee <_free_r+0x4a>
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	1858      	adds	r0, r3, r1
 80043fc:	42a0      	cmp	r0, r4
 80043fe:	d10b      	bne.n	8004418 <_free_r+0x74>
 8004400:	6820      	ldr	r0, [r4, #0]
 8004402:	4401      	add	r1, r0
 8004404:	1858      	adds	r0, r3, r1
 8004406:	4282      	cmp	r2, r0
 8004408:	6019      	str	r1, [r3, #0]
 800440a:	d1dd      	bne.n	80043c8 <_free_r+0x24>
 800440c:	6810      	ldr	r0, [r2, #0]
 800440e:	6852      	ldr	r2, [r2, #4]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	4401      	add	r1, r0
 8004414:	6019      	str	r1, [r3, #0]
 8004416:	e7d7      	b.n	80043c8 <_free_r+0x24>
 8004418:	d902      	bls.n	8004420 <_free_r+0x7c>
 800441a:	230c      	movs	r3, #12
 800441c:	602b      	str	r3, [r5, #0]
 800441e:	e7d3      	b.n	80043c8 <_free_r+0x24>
 8004420:	6820      	ldr	r0, [r4, #0]
 8004422:	1821      	adds	r1, r4, r0
 8004424:	428a      	cmp	r2, r1
 8004426:	bf04      	itt	eq
 8004428:	6811      	ldreq	r1, [r2, #0]
 800442a:	6852      	ldreq	r2, [r2, #4]
 800442c:	6062      	str	r2, [r4, #4]
 800442e:	bf04      	itt	eq
 8004430:	1809      	addeq	r1, r1, r0
 8004432:	6021      	streq	r1, [r4, #0]
 8004434:	605c      	str	r4, [r3, #4]
 8004436:	e7c7      	b.n	80043c8 <_free_r+0x24>
 8004438:	bd38      	pop	{r3, r4, r5, pc}
 800443a:	bf00      	nop
 800443c:	200010cc 	.word	0x200010cc

08004440 <_malloc_r>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	1ccd      	adds	r5, r1, #3
 8004444:	f025 0503 	bic.w	r5, r5, #3
 8004448:	3508      	adds	r5, #8
 800444a:	2d0c      	cmp	r5, #12
 800444c:	bf38      	it	cc
 800444e:	250c      	movcc	r5, #12
 8004450:	2d00      	cmp	r5, #0
 8004452:	4606      	mov	r6, r0
 8004454:	db01      	blt.n	800445a <_malloc_r+0x1a>
 8004456:	42a9      	cmp	r1, r5
 8004458:	d903      	bls.n	8004462 <_malloc_r+0x22>
 800445a:	230c      	movs	r3, #12
 800445c:	6033      	str	r3, [r6, #0]
 800445e:	2000      	movs	r0, #0
 8004460:	bd70      	pop	{r4, r5, r6, pc}
 8004462:	f000 f87d 	bl	8004560 <__malloc_lock>
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <_malloc_r+0xac>)
 8004468:	6814      	ldr	r4, [r2, #0]
 800446a:	4621      	mov	r1, r4
 800446c:	b991      	cbnz	r1, 8004494 <_malloc_r+0x54>
 800446e:	4c20      	ldr	r4, [pc, #128]	; (80044f0 <_malloc_r+0xb0>)
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	b91b      	cbnz	r3, 800447c <_malloc_r+0x3c>
 8004474:	4630      	mov	r0, r6
 8004476:	f000 f863 	bl	8004540 <_sbrk_r>
 800447a:	6020      	str	r0, [r4, #0]
 800447c:	4629      	mov	r1, r5
 800447e:	4630      	mov	r0, r6
 8004480:	f000 f85e 	bl	8004540 <_sbrk_r>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d124      	bne.n	80044d2 <_malloc_r+0x92>
 8004488:	230c      	movs	r3, #12
 800448a:	6033      	str	r3, [r6, #0]
 800448c:	4630      	mov	r0, r6
 800448e:	f000 f868 	bl	8004562 <__malloc_unlock>
 8004492:	e7e4      	b.n	800445e <_malloc_r+0x1e>
 8004494:	680b      	ldr	r3, [r1, #0]
 8004496:	1b5b      	subs	r3, r3, r5
 8004498:	d418      	bmi.n	80044cc <_malloc_r+0x8c>
 800449a:	2b0b      	cmp	r3, #11
 800449c:	d90f      	bls.n	80044be <_malloc_r+0x7e>
 800449e:	600b      	str	r3, [r1, #0]
 80044a0:	50cd      	str	r5, [r1, r3]
 80044a2:	18cc      	adds	r4, r1, r3
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 f85c 	bl	8004562 <__malloc_unlock>
 80044aa:	f104 000b 	add.w	r0, r4, #11
 80044ae:	1d23      	adds	r3, r4, #4
 80044b0:	f020 0007 	bic.w	r0, r0, #7
 80044b4:	1ac3      	subs	r3, r0, r3
 80044b6:	d0d3      	beq.n	8004460 <_malloc_r+0x20>
 80044b8:	425a      	negs	r2, r3
 80044ba:	50e2      	str	r2, [r4, r3]
 80044bc:	e7d0      	b.n	8004460 <_malloc_r+0x20>
 80044be:	428c      	cmp	r4, r1
 80044c0:	684b      	ldr	r3, [r1, #4]
 80044c2:	bf16      	itet	ne
 80044c4:	6063      	strne	r3, [r4, #4]
 80044c6:	6013      	streq	r3, [r2, #0]
 80044c8:	460c      	movne	r4, r1
 80044ca:	e7eb      	b.n	80044a4 <_malloc_r+0x64>
 80044cc:	460c      	mov	r4, r1
 80044ce:	6849      	ldr	r1, [r1, #4]
 80044d0:	e7cc      	b.n	800446c <_malloc_r+0x2c>
 80044d2:	1cc4      	adds	r4, r0, #3
 80044d4:	f024 0403 	bic.w	r4, r4, #3
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d005      	beq.n	80044e8 <_malloc_r+0xa8>
 80044dc:	1a21      	subs	r1, r4, r0
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 f82e 	bl	8004540 <_sbrk_r>
 80044e4:	3001      	adds	r0, #1
 80044e6:	d0cf      	beq.n	8004488 <_malloc_r+0x48>
 80044e8:	6025      	str	r5, [r4, #0]
 80044ea:	e7db      	b.n	80044a4 <_malloc_r+0x64>
 80044ec:	200010cc 	.word	0x200010cc
 80044f0:	200010d0 	.word	0x200010d0

080044f4 <_realloc_r>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	4607      	mov	r7, r0
 80044f8:	4614      	mov	r4, r2
 80044fa:	460e      	mov	r6, r1
 80044fc:	b921      	cbnz	r1, 8004508 <_realloc_r+0x14>
 80044fe:	4611      	mov	r1, r2
 8004500:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004504:	f7ff bf9c 	b.w	8004440 <_malloc_r>
 8004508:	b922      	cbnz	r2, 8004514 <_realloc_r+0x20>
 800450a:	f7ff ff4b 	bl	80043a4 <_free_r>
 800450e:	4625      	mov	r5, r4
 8004510:	4628      	mov	r0, r5
 8004512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004514:	f000 f826 	bl	8004564 <_malloc_usable_size_r>
 8004518:	42a0      	cmp	r0, r4
 800451a:	d20f      	bcs.n	800453c <_realloc_r+0x48>
 800451c:	4621      	mov	r1, r4
 800451e:	4638      	mov	r0, r7
 8004520:	f7ff ff8e 	bl	8004440 <_malloc_r>
 8004524:	4605      	mov	r5, r0
 8004526:	2800      	cmp	r0, #0
 8004528:	d0f2      	beq.n	8004510 <_realloc_r+0x1c>
 800452a:	4631      	mov	r1, r6
 800452c:	4622      	mov	r2, r4
 800452e:	f7ff ff15 	bl	800435c <memcpy>
 8004532:	4631      	mov	r1, r6
 8004534:	4638      	mov	r0, r7
 8004536:	f7ff ff35 	bl	80043a4 <_free_r>
 800453a:	e7e9      	b.n	8004510 <_realloc_r+0x1c>
 800453c:	4635      	mov	r5, r6
 800453e:	e7e7      	b.n	8004510 <_realloc_r+0x1c>

08004540 <_sbrk_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4c06      	ldr	r4, [pc, #24]	; (800455c <_sbrk_r+0x1c>)
 8004544:	2300      	movs	r3, #0
 8004546:	4605      	mov	r5, r0
 8004548:	4608      	mov	r0, r1
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	f7fc fbc0 	bl	8000cd0 <_sbrk>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_sbrk_r+0x1a>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	b103      	cbz	r3, 800455a <_sbrk_r+0x1a>
 8004558:	602b      	str	r3, [r5, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	200011d8 	.word	0x200011d8

08004560 <__malloc_lock>:
 8004560:	4770      	bx	lr

08004562 <__malloc_unlock>:
 8004562:	4770      	bx	lr

08004564 <_malloc_usable_size_r>:
 8004564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004568:	1f18      	subs	r0, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfbc      	itt	lt
 800456e:	580b      	ldrlt	r3, [r1, r0]
 8004570:	18c0      	addlt	r0, r0, r3
 8004572:	4770      	bx	lr

08004574 <_init>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr

08004580 <_fini>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr
